{"version":3,"sources":["main/Menu/Menu.module.scss","main/authGroup/RestorePage/Restore.module.scss","main/authGroup/LoginPage/Login.module.scss","Components/Button/Button.module.scss","main/authGroup/RegisterPage/Register.module.scss","main/ProfilePage/Profile.module.scss","Components/Input/Input.module.scss","main/NotFound/NotFound.module.scss","serviceWorker.ts","store/ProfileReducer.ts","store/LoginReducer.ts","store/RegisterReducer.ts","store/RestoreReducer.ts","store/ChangePasswordReducer.ts","store/redux-store.ts","Components/Button/Button.tsx","Components/Input/Input.tsx","main/authGroup/LoginPage/LoginForm.tsx","main/authGroup/LoginPage/Login.tsx","main/authGroup/RestorePage/Restore.tsx","main/authGroup/RegisterPage/Register.tsx","main/ProfilePage/Profile.tsx","main/NotFound/NotFound.tsx","main/Menu/Menu.tsx","main/authGroup/RestorePage/RestoreChangePassword.tsx","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","initialState","reducers","combineReducers","profile","state","login","register","restore","changePassword","store","createStore","Button","props","className","s","loginButtonBody","link","button","title","Input","inputBody","label","LoginForm","React","memo","to","Login","loginPage","loginFormContainer","text1","text","Restore","restorePage","loginBlock","restoreBlock","Register","registerPage","registerBox","Profile","profilePage","profileContainer","NotFound","notFoundPage","Menu","useState","isHide","setIsHide","menu","onClick","menuActive","activeClassName","activeLink","RestoreChangePassword","App","path","render","ReactDOM","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5ea9c170.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__2yOrF\",\"menuActive\":\"Menu_menuActive__1fkJz\",\"link\":\"Menu_link__wtBYG\",\"activeLink\":\"Menu_activeLink__3jOIJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Restore_neon__2xnCX\",\"restorePage\":\"Restore_restorePage__Yt06I\",\"loginBlock\":\"Restore_loginBlock__KEPf9\",\"restoreBlock\":\"Restore_restoreBlock__j8go8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Login_neon__2oOc0\",\"loginPage\":\"Login_loginPage__3QmJr\",\"loginFormContainer\":\"Login_loginFormContainer__1OO4x\",\"text1\":\"Login_text1__2MhTi\",\"text\":\"Login_text__3qblI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Button_neon__17sQT\",\"button\":\"Button_button__2OrEq\",\"loginButtonBody\":\"Button_loginButtonBody__3X43V\",\"link\":\"Button_link__w9gha\",\"btn-anim-1\":\"Button_btn-anim-1__2KaU3\",\"btn-anim-2\":\"Button_btn-anim-2__29h2Y\",\"btn-anim-3\":\"Button_btn-anim-3__2WLod\",\"btn-anim-4\":\"Button_btn-anim-4__kwUi5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Register_neon__3snfG\",\"registerPage\":\"Register_registerPage__22eL8\",\"registerBox\":\"Register_registerBox__byB-h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Profile_neon__2N-I0\",\"profilePage\":\"Profile_profilePage__1-AUr\",\"profileContainer\":\"Profile_profileContainer__1bZij\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Input_neon__2TJ1R\",\"inputBody\":\"Input_inputBody__2u4Qd\",\"error\":\"Input_error__hy98E\",\"shake\":\"Input_shake__tmaUI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"NotFound_neon__k5F0a\",\"notFoundPage\":\"NotFound_notFoundPage__3y1lY\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export type ActionsType={\r\n\r\n}\r\n\r\nlet initialState = {\r\n\r\n}\r\n\r\nexport const ProfileReducer = (state = initialState, action: ActionsType) => {\r\n\r\n    return state\r\n}\r\n","export type ActionsType={\r\n\r\n}\r\n\r\nlet initialState = {\r\n\r\n}\r\n\r\nexport const LoginReducer = (state = initialState, action: ActionsType) => {\r\n    return state\r\n}\r\n","export type ActionsType={\r\n\r\n}\r\n\r\nlet initialState = {\r\n\r\n}\r\n\r\nexport const RegisterReducer = (state = initialState, action: ActionsType) => {\r\n    return state\r\n}\r\n","export type ActionsType={\r\n\r\n}\r\n\r\nlet initialState = {\r\n\r\n}\r\n\r\nexport const RestoreReducer = (state = initialState, action: ActionsType) => {\r\n    return state\r\n}\r\n","export type ActionsType={\r\n\r\n}\r\n\r\nlet initialState = {\r\n\r\n}\r\n\r\nexport const ChangePasswordReducer = (state = initialState, action: ActionsType) => {\r\n    return state\r\n}\r\n","import {combineReducers, createStore} from 'redux';\r\nimport {ProfileReducer} from \"./ProfileReducer\";\r\nimport {LoginReducer} from \"./LoginReducer\";\r\nimport {RegisterReducer} from \"./RegisterReducer\";\r\nimport {RestoreReducer} from \"./RestoreReducer\";\r\nimport {ChangePasswordReducer} from \"./ChangePasswordReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profile: ProfileReducer,\r\n    login: LoginReducer,\r\n    register: RegisterReducer,\r\n    restore: RestoreReducer,\r\n    changePassword: ChangePasswordReducer\r\n})\r\n\r\nconst store = createStore(reducers)\r\n//@ts-ignore\r\nexport default store","import React from 'react';\r\nimport s from './Button.module.scss'\r\n\r\ntype ButtonType = {\r\n    title?: string\r\n}\r\n\r\nconst Button = (props: ButtonType) => {\r\n    return (\r\n        <div className={s.loginButtonBody}>\r\n            <span className={s.link}>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                <button className={s.button}>\r\n                    {props.title}\r\n                </button>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button","import React from \"react\";\r\nimport s from './Input.module.scss'\r\n\r\ntype InputType = {\r\n    label?: string\r\n}\r\n\r\nconst Input = (props: InputType) => {\r\n    return (\r\n        <div className={s.inputBody}>\r\n            <input />\r\n            <label>{props.label}</label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input","import React from 'react';\r\nimport Button from \"../../../Components/Button/Button\";\r\nimport Input from \"../../../Components/Input/Input\";\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst LoginForm = React.memo(function (props: any) {\r\n    return (\r\n        <div className={props.className}>\r\n            <Input label={'Login'}/>\r\n            <Input label={'Password'}/>\r\n            <NavLink to={'/profile'}>\r\n                <Button title={'login'}/>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default LoginForm","import React from 'react';\r\nimport s from './Login.module.scss'\r\nimport {NavLink} from 'react-router-dom';\r\nimport LoginForm from \"./LoginForm\";\r\n\r\ntype LoginFormType = {\r\n\r\n}\r\n\r\nconst Login = (props: any) => {\r\n\r\n    return (\r\n        <div className={s.loginPage}>\r\n            <div className={s.loginFormContainer} >\r\n                <h1> LOGIN </h1>\r\n                <LoginForm />\r\n                <div>\r\n                    <NavLink className={s.text1} to='/restore'>Forgot your password?</NavLink>\r\n                </div>\r\n                <div>\r\n                    <NavLink className={s.text} to='/register'>Register</NavLink>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","import React from 'react';\r\nimport s from './Restore.module.scss'\r\nimport Input from \"../../../Components/Input/Input\";\r\nimport LoginForm from '../LoginPage/LoginForm';\r\nimport Button from \"../../../Components/Button/Button\";\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst Restore = (props: any) => {\r\n    return (\r\n        <div className={s.restorePage}>\r\n            <div>\r\n                <LoginForm className={s.loginBlock}/>\r\n            </div>\r\n            <div className={s.restoreBlock}>\r\n                <h1>Forgot you password?</h1>\r\n                <h1>Dont worry</h1>\r\n                <Input label={'Enter your login'}/>\r\n                <NavLink to={'/restore/changePassword'}>\r\n                    <Button title={'SEND'}/>\r\n                </NavLink>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Restore","import React from 'react';\r\nimport s from './Register.module.scss'\r\nimport Input from \"../../../Components/Input/Input\";\r\nimport Button from \"../../../Components/Button/Button\";\r\n\r\nconst Register = () => {\r\n    return (\r\n        <div className={s.registerPage}>\r\n           <div className={s.registerBox}>\r\n               <h1>REGISTER</h1>\r\n               <Input label={'Enter your login'} />\r\n               <Input label={'Enter your login'} />\r\n               <Input label={'Enter your login'} />\r\n               <Input label={'Enter your login'}/>\r\n               <Input label={'Enter your login'}/>\r\n               <Input label={'Enter your login'}/>\r\n               <Input label={'Enter your login'}/>\r\n               <Input label={'Enter your login'}/>\r\n               <Input label={'Enter your login'}/>\r\n               <Button title={\"SEND\"}/>\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register","import React from 'react';\r\nimport s from './Profile.module.scss'\r\n\r\nconst Profile = () => {\r\n    return (\r\n        <div className={s.profilePage}>\r\n            <div className={s.profileContainer}>\r\n                <h1>profile</h1>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react';\r\nimport s from './NotFound.module.scss'\r\n\r\n\r\nconst NotFound = (props: any) => {\r\n\r\n    return (\r\n        <div className={s.notFoundPage}>\r\n            <h1>404</h1>\r\n            <div>\r\n                <h1>not found</h1>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound","import React, {useState} from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from './Menu.module.scss'\r\n\r\nconst Menu = () => {\r\n\r\n    const [isHide, setIsHide] = useState(false)\r\n\r\n    const showMenu = () => {\r\n        setIsHide(false)\r\n    }\r\n    const hideMenu = () => {\r\n        setIsHide(true)\r\n    }\r\n\r\n    return (\r\n        <div className={s.menu}>\r\n            {isHide\r\n                ? <button onClick={showMenu}>menu</button>\r\n                : <div className={s.menuActive}>\r\n                    <button onClick={hideMenu}>menu</button>\r\n                    <NavLink to='/restore' className={s.link} activeClassName={s.activeLink}>Forgot password</NavLink>\r\n                    <NavLink to='/register' className={s.link} activeClassName={s.activeLink}>Register</NavLink>\r\n                    <NavLink to='/login' className={s.link} activeClassName={s.activeLink}>Login</NavLink>\r\n                    <NavLink to='/profile' className={s.link} activeClassName={s.activeLink}>Profile</NavLink>\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Menu","import React from 'react';\r\nimport s from './Restore.module.scss'\r\nimport Input from \"../../../Components/Input/Input\";\r\nimport LoginForm from '../LoginPage/LoginForm';\r\nimport Button from \"../../../Components/Button/Button\";\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst RestoreChangePassword = (props: any) => {\r\n    return (\r\n        <div className={s.restorePage}>\r\n            <div>\r\n                <LoginForm className={s.loginBlock}/>\r\n            </div>\r\n\r\n            <div className={s.restoreBlock}>\r\n                <h1>Forgot you password?</h1>\r\n                <h1>Dont worry</h1>\r\n                <Input label={'new password'}/>\r\n                <Input label={'new password'}/>\r\n                <NavLink to={'/login'}>\r\n                    <Button title={'SEND'}/>\r\n                </NavLink>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RestoreChangePassword","import React from 'react';\nimport './App.css';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\nimport Login from './main/authGroup/LoginPage/Login';\nimport Restore from \"./main/authGroup/RestorePage/Restore\";\nimport Register from \"./main/authGroup/RegisterPage/Register\";\nimport Profile from \"./main/ProfilePage/Profile\";\nimport NotFound from './main/NotFound/NotFound';\nimport Menu from \"./main/Menu/Menu\";\nimport RestoreChangePassword from \"./main/authGroup/RestorePage/RestoreChangePassword\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Menu/>\n\n            <Switch >\n                <Route  path='/restore' render={() => (<Restore/>)}/>\n                <Route  path='/register' render={() => (<Register/>)}/>\n                <Route  path={['/login', '/']} render={() => (<Login/>)}/>\n                <Route  path='/profile' render={() => (<Profile/>)}/>\n                <Route  path='/restore/changePassword' render={() => (<RestoreChangePassword/>)}/>\n                <Route render={() => (<NotFound/>)}/>\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store/redux-store\";\nimport {HashRouter} from \"react-router-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter basename={'/'}>\n            <App/>\n        </HashRouter>\n    </Provider>\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}