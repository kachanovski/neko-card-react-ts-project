{"version":3,"sources":["serviceWorker.ts","api/ProfileAPI.ts","api/authAPI.ts","store/isFetchingReducer.ts","store/LoginReducer.ts","api/registerAPI.ts","store/RegisterReducer.ts","api/restoreAPI.ts","store/RestoreReducer.ts","store/ChangePasswordReducer.ts","api/PacksAPI.ts","store/PacksReducer.ts","store/redux-store.ts","store/ProfileReducer.ts","Components/Button/Button.tsx","Components/Input/Input.tsx","Components/Checkbox/Checkbox.tsx","main/authGroup/LoginPage/LoginForm.tsx","main/authGroup/LoginPage/Login.tsx","main/authGroup/RestorePage/Restore.tsx","main/ProfilePage/Packs/ModalWindow/ModalWindow.tsx","Components/Paginator/Paginator.tsx","main/ProfilePage/Packs/Search/SearchPacks.tsx","main/ProfilePage/Packs/Pack.tsx","main/ProfilePage/Profile.tsx","main/NotFound/NotFound.tsx","main/authGroup/RestorePage/RestoreChangePassword.tsx","Components/Preloader/Preloader.tsx","main/authGroup/RegisterPage/Register.tsx","App.tsx","index.tsx","main/ProfilePage/Profile.module.scss","main/authGroup/LoginPage/Login.module.scss","main/authGroup/RestorePage/Restore.module.scss","Components/Paginator/Paginator.module.css","main/authGroup/RegisterPage/Register.module.scss","Components/Button/Button.module.scss","Components/Input/Input.module.scss","main/ProfilePage/Packs/ModalWindow/ModalWindow.module.scss","Components/Preloader/Preloader.module.scss","Components/Checkbox/Checkbox.module.scss","main/NotFound/NotFound.module.scss"],"names":["Boolean","window","location","hostname","match","axios","create","withCredentials","baseURL","instance","authAPI","email","password","rememberMe","post","delete","initialState","isFetching","isFetch","type","_id","name","error","verified","publicCardPacksCount","isAdmin","created","updated","authMe","setUser","user","setError","setErrorInPass","errorIn","authMeAction","RegisterAPI","data","id","errorMessage","SetErrorRegisterAC","message","RestoreApi","passwordToken","href","split","confirm_password","resetPasswordToken","success","disableButton","setErrorRestore","setSuccessRequest","PacksAPI","searchName","get","cardsPack","packID","put","PacksInitialState","packs","packUser_id","page","pageCount","cardsPacksTotalCount","updPack","getPacks","dispatch","then","res","cardPacks","catch","e","console","log","response","reducers","combineReducers","profile","state","action","login","register","restore","changePassword","sort","a","b","nameA","toLowerCase","nameB","store","createStore","applyMiddleware","thunkMiddleWare","Button","props","className","s","loginButtonBody","link","onClick","disabled","disable","button","title","Input","inputBody","value","onChange","ref","label","Checkbox","checked","checkbox","schemaLogin","yup","shape","required","min","LoginForm","React","memo","useForm","resolver","yupResolver","control","handleSubmit","errors","reset","useDispatch","useSelector","onSubmit","useCallback","promise","useEffect","to","as","defaultValue","errorMessageColor","Login","loginPage","loginFormContainer","items","text1","text","schema","Restore","restorePage","restoreBlock","status","RestoreTC","ModalWindow","modalWindowContainer","modalWindow","packName","packType","newCardsPack","user_id","setShowModalWindow","Paginator","useState","newPage","setNewPage","pagesCount","Math","ceil","startPage","setStartPage","pages","i","push","goToPageNumber","newStartPage","sliderWrapper","newStartCount","map","p","active","hover","key","inputWrapper","placeholder","currentTarget","target","input","onKeyPress","keyCode","SearchPacks","searchField","onChangeSearchInput","searchValue","onClickSearch","Pack","pack","editMode","setEditMode","cardField","editPack","updatedCardsPack","myPacks","maxLength","rating","user_name","deletePack","deletedCardsPack","Profile","userID","showModalWindow","setSearchValue","profilePage","profileContainer","titleProfile","avatar","profileContent","packsContainer","showMyPacksTC","NotFound","notFoundPage","RestoreChangePassword","Preloader","cssload_container","cssload_speeding_wheel","Register","newUserData","length","registerPage","onBlur","registerBox","newData","SetRegisterDataAC","addedUser","RegisterUserTC","App","path","render","exact","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.f3ec1078.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\nimport { ProfileDataType } from \"../store/ProfileReducer\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials:true,\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\"\r\n   //baseURL: \"http://localhost:7542/2.0/\"\r\n})\r\n\r\nexport const ProfileAPI = {\r\n    GetProfile:(data: {})=>{\r\n        return instance.post<ProfileDataType>('auth/me', data).then(res=>\r\n            res.data\r\n        )\r\n    }\r\n}","import axios from 'axios'\r\n\r\ntype LogOutResponse = {\r\n    info: string\r\n    error: string\r\n}\r\nexport type ResponseServerType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number // количество колод\r\n    created: string      //Date\r\n    updated: string    //Date\r\n    isAdmin: boolean\r\n    verified: boolean // подтвердил ли почту\r\n    rememberMe: boolean\r\n    error: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\"\r\n  //baseURL: \"http://localhost:7542/2.0/\"\r\n})\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post<ResponseServerType>('auth/login', {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete<LogOutResponse>('auth/me')\r\n    },\r\n    authMe() {\r\n        return instance.post<ResponseServerType>('auth/me')\r\n    }\r\n}","export type InitIsFetchingReducerState = {\r\n    isFetching: boolean\r\n}\r\n\r\nconst initialState: InitIsFetchingReducerState = {\r\n    isFetching: false,\r\n}\r\n\r\nexport const IsFetchingReducer = (state: InitIsFetchingReducerState = initialState, action: ActionTypes): InitIsFetchingReducerState => {\r\n    switch (action.type) {\r\n        case \"login/SET_FETCHING\":\r\n            return {...state, isFetching: action.isFetch}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// AC\r\nexport const isFetching = (isFetch: boolean) => ({type: 'login/SET_FETCHING', isFetch} as const)\r\n\r\nexport type IsFetch = ReturnType<typeof isFetching>\r\n\r\ntype ActionTypes = IsFetch","import {Dispatch} from \"redux\";\r\nimport {authAPI, ResponseServerType} from \"../api/authAPI\";\r\nimport {IsFetch, isFetching} from \"./isFetchingReducer\";\r\n\r\nexport type InitialLoginReducerState = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number // количество колод\r\n    created: string // Date\r\n    updated: string // Date\r\n    isAdmin: boolean\r\n    verified: boolean // подтвердил ли почту\r\n    rememberMe: boolean\r\n    token?: string,\r\n    tokenDeathTime?: number\r\n    error: string | null,\r\n    errorIn?: ErrorInType\r\n    authMe: boolean\r\n}\r\n\r\n\r\nconst initialState: InitialLoginReducerState = {\r\n    _id: '',\r\n    email: '',\r\n    name: '',\r\n    rememberMe: false,\r\n    error: null,\r\n    verified: false,\r\n    publicCardPacksCount: 0,\r\n    isAdmin: false,\r\n    created: '',\r\n    updated: '',\r\n    authMe: false\r\n}\r\n\r\nexport const LoginReducer = (state: InitialLoginReducerState = initialState, action: ActionType): InitialLoginReducerState => {\r\n    switch (action.type) {\r\n        case \"login/SET_USER\":\r\n            return {...state, ...action.user}\r\n        case \"login/SET_ERROR\":\r\n            return {...state, error: action.error}\r\n        case \"login/SET_ERROR_IN\":\r\n            return {...state, errorIn: action.errorIn}\r\n        case \"login/AUTH_ME\":\r\n            return {...state, authMe: action.authMe}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//thunk\r\nexport const setLogin = (email: string, password: string, rememberMe: boolean) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(isFetching(true))\r\n        const promise = await authAPI.login(email, password, rememberMe)\r\n        dispatch(authMeAction(true))\r\n        dispatch(setUser(promise.data))\r\n        console.log(\"Response(login): \", promise)\r\n    } catch (e) {\r\n        if (e.response) {\r\n            console.log('ERROR(login): ', e.response.data.error)\r\n            if (e.response.data.password) {                   // если валидацию не прошел пароль\r\n                dispatch(setErrorInPass(\"password\"))  // диспатч \"password\", чтобы отобразить ошибку в пароле\r\n            } else if (e.response.data.email) {             // если валидацию не прошел логин (email)\r\n                dispatch(setErrorInPass(\"email\"))   // диспатч \"email\", чтобы отобразить ошибку в логине\r\n            }\r\n            dispatch(setError(e.response.data.error))\r\n        } else {\r\n            console.log('ERROR: ', e.message + ', more details in the console')\r\n        }\r\n    }\r\n    dispatch(isFetching(false))\r\n}\r\nexport const setLogOutUser = () => async (dispatch: Dispatch) => {\r\n    dispatch(isFetching(true))\r\n    try {\r\n        await authAPI.logout()\r\n        dispatch(authMeAction(false))\r\n\r\n    } catch (e) {\r\n        const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n        console.log('Log out error: ', error)\r\n    }\r\n    dispatch(isFetching(false))\r\n}\r\nexport const AuthMe = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        const promise = await authAPI.authMe()\r\n        dispatch(authMeAction(true))\r\n        dispatch(setUser(promise.data))\r\n    } catch (e) {\r\n        const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n        console.log('Authorization: ', error)\r\n    }\r\n}\r\n\r\nexport type ErrorInType = 'password' | 'email'\r\n//AC\r\nexport const setUser = (user: ResponseServerType) => ({type: 'login/SET_USER', user} as const)\r\nexport const setError = (error: string | null) => ({type: 'login/SET_ERROR', error} as const)\r\nexport const setErrorInPass = (errorIn: ErrorInType) => ({type: 'login/SET_ERROR_IN', errorIn} as const)\r\nexport const authMeAction = (authMe: boolean) => ({type: 'login/AUTH_ME', authMe} as const)\r\n\r\nexport type SetUserType = ReturnType<typeof setUser>\r\nexport type SetError = ReturnType<typeof setError>\r\nexport type ErrorPass = ReturnType<typeof setErrorInPass>\r\nexport type authMeAction = ReturnType<typeof authMeAction>\r\n\r\ntype ActionType = SetUserType | SetError | IsFetch | ErrorPass  | authMeAction","import axios from 'axios'\r\nimport { RegisterUserDataType} from \"../store/RegisterReducer\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials:true,\r\n    //baseURL: \"https://neko-back.herokuapp.com/2.0\"\r\n    baseURL: \"http://localhost:7542/2.0/\"\r\n})\r\n\r\ntype RegisterResponseType={\r\n    addedUser:RegisterUserDataType\r\n    error:string\r\n}\r\n\r\nexport type PostType = {\r\n    email:string\r\n    password:string\r\n}\r\n\r\nexport const RegisterAPI = {\r\n    RegisterUser:(data:PostType)=>{\r\n        return instance.post<RegisterResponseType>('auth/register/', data)}\r\n}","import {Dispatch} from \"redux\";\r\nimport {RegisterAPI, PostType} from \"../api/registerAPI\";\r\nimport {IsFetch, isFetching} from \"./isFetchingReducer\";\r\n\r\nexport type ActionsType =\r\n    SetRegisterDataAcType\r\n    | SetErrorMessageAcType\r\n    | IsFetch\r\n\r\nexport type RegisterUserDataType = {\r\n    email: string\r\n    id: string\r\n}\r\n\r\nlet initialState = {\r\n    data: {\r\n        email: '',\r\n        id: '',\r\n    },\r\n    errorMessage: '',\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nexport const RegisterReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"REGISTER/SET-REGISTER-DATA\": {\r\n            return {...state, ...state.data, data: action.data}\r\n        }\r\n        case \"REGISTER/SET-ERROR-MESSAGE-TYPE\": {\r\n            return { ...state, errorMessage: action.message}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const SetRegisterDataAC = (data: RegisterUserDataType) => {\r\n    return {type: \"REGISTER/SET-REGISTER-DATA\", data} as const\r\n}\r\nexport const SetErrorRegisterAC = (message: string) => {\r\n    return {type: \"REGISTER/SET-ERROR-MESSAGE-TYPE\", message} as const\r\n}\r\n\r\nexport const RegisterUserTC = (data: PostType) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(isFetching(true))\r\n        RegisterAPI.RegisterUser(data)\r\n            .then(res => {\r\n                if (!res.data.error) {\r\n                    dispatch(SetRegisterDataAC(res.data.addedUser))\r\n                } else {\r\n                    dispatch(SetErrorRegisterAC(res.data.error))\r\n                }\r\n                dispatch(isFetching(false))\r\n            })\r\n            .catch(e => {\r\n                    dispatch(SetErrorRegisterAC(e.response.data.error))\r\n                    dispatch(isFetching(false))\r\n                }\r\n            )\r\n\r\n    }\r\n}\r\n\r\ntype SetRegisterDataAcType = ReturnType<typeof SetRegisterDataAC>\r\ntype SetErrorMessageAcType = ReturnType<typeof SetErrorRegisterAC>\r\n\r\n","import axios from 'axios'\r\nimport {RestoreFormInput} from \"../main/authGroup/RestorePage/Restore\";\r\nimport {ChangePasswordFormInput} from \"../main/authGroup/RestorePage/RestoreChangePassword\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    // baseURL: \"http://localhost:7542/2.0/\"\r\n        baseURL: \"https://neko-back.herokuapp.com/2.0\"\r\n})\r\ntype RestoreResponseType = {\r\n    answer: boolean,\r\n    html: boolean,\r\n    info: string\r\n    success: boolean\r\n}\r\ntype ChangePasswordResponseType = {\r\n    info: string\r\n}\r\n\r\n\r\nexport const RestoreApi = {\r\n    restore(data: RestoreFormInput) {\r\n        const email = data.email\r\n        return instance.post<RestoreResponseType>('auth/forgot', {\r\n            email,\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\r\n                          password recovery link: \r\n                          <a href='http://localhost:3000/neko-card-react-ts-project#/changePassword/$token$'>link</a>\r\n                      </div> `\r\n        })\r\n    },\r\n    changePassword(data: ChangePasswordFormInput) {\r\n        const passwordToken = window.location.href.split('/')[5]\r\n        const password = data.confirm_password\r\n        return instance.post<ChangePasswordResponseType>('auth/set-new-password', {\r\n            password: password,\r\n            resetPasswordToken: passwordToken\r\n        })\r\n    }\r\n}","import {RestoreFormInput} from \"../main/authGroup/RestorePage/Restore\"\r\nimport {Dispatch} from \"redux\";\r\nimport {ChangePasswordFormInput} from \"../main/authGroup/RestorePage/RestoreChangePassword\";\r\nimport {RestoreApi} from \"../api/restoreAPI\";\r\nimport {IsFetch, isFetching} from \"./isFetchingReducer\";\r\n\r\nexport type ActionsType = SetLoadingType | IsFetch | SetSuccessRequest\r\n\r\nexport type InitialRestoreStateType = {\r\n    error: string | null\r\n    success: boolean\r\n    disableButton: boolean\r\n}\r\n\r\nlet initialState: InitialRestoreStateType = {\r\n    error: null,\r\n    success: false,\r\n    disableButton: false\r\n}\r\n\r\nexport const RestoreReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'RESTORE/SET_ERROR':\r\n            return {...state, error: action.error}\r\n        case 'RESTORE/SET_SUCCESS_REQUEST':\r\n            return {...state, success: action.success}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setErrorRestore = (error: string | null) => ({\r\n    type: 'RESTORE/SET_ERROR', error\r\n} as const)\r\nexport const setSuccessRequest = (success: boolean) => ({\r\n    type: 'RESTORE/SET_SUCCESS_REQUEST', success\r\n} as const)\r\n\r\n//types\r\nexport type SetLoadingType = ReturnType<typeof setErrorRestore>\r\nexport type SetSuccessRequest = ReturnType<typeof setSuccessRequest>\r\n\r\n\r\n\r\n//thunk\r\nexport const RestoreTC = (data: RestoreFormInput) => (dispatch: Dispatch) => {\r\n    dispatch(isFetching(true))\r\n    dispatch(setSuccessRequest(false))\r\n    RestoreApi.restore(data)\r\n        .then(res => {\r\n                if (res.status === 200) {\r\n                    dispatch(isFetching(false))\r\n                    dispatch(setErrorRestore(null))\r\n                    dispatch(setSuccessRequest(true))\r\n                }\r\n            }\r\n        )\r\n        .catch(e => {\r\n            debugger\r\n            console.log(e.response)\r\n            dispatch(isFetching(false))\r\n            dispatch(setErrorRestore(e.response.data.error))\r\n        })\r\n\r\n}\r\n\r\nexport const ChangePasswordTC = (password: ChangePasswordFormInput) => (dispatch: Dispatch) => {\r\n    dispatch(isFetching(true))\r\n    dispatch(setSuccessRequest(false))\r\n    RestoreApi.changePassword(password)\r\n        .then(res => {\r\n            if (res.status === 200) {\r\n                dispatch(isFetching(false))\r\n                setErrorRestore(null)\r\n                dispatch(setSuccessRequest(true))\r\n            }\r\n        })\r\n        .catch(e => {\r\n            dispatch(isFetching(false))\r\n            dispatch(setErrorRestore(e.response.data.error))\r\n        })\r\n}\r\n","export type ActionsType={\r\n\r\n}\r\n\r\nlet initialState = {\r\n\r\n}\r\n\r\nexport const ChangePasswordReducer = (state = initialState, action: ActionsType) => {\r\n    return state\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport type PacksType = {\r\n    name?: string           //\"no Name\" если не отправить будет таким\r\n    path?:  string          // \"/def\" если не отправить будет такой\r\n    grade?: number          // не обязателен\r\n    shots?: number          // не обязателен\r\n    rating?: number         // не обязателен\r\n    deckCover?: string      //\"url or base64\", не обязателен\r\n    private?: boolean       //false если не отправить будет такой\r\n    type?: string           //\"pack\" если не отправить будет таким\r\n}\r\nexport type EditPackType = { _id: string} & PacksType\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\"\r\n    // baseURL: \"http://localhost:7542/2.0/\"\r\n})\r\n\r\nexport const PacksAPI = {\r\n    getPacks: (searchName: string) => {\r\n        return instance.get(\r\n            `/cards/pack?packName=${searchName}&pageCount=100&page=1&sortPacks=0updated`\r\n        );\r\n    },\r\n    addPacks: (cardsPack: PacksType) => {\r\n        return instance.post('/cards/pack', {cardsPack})\r\n    },\r\n    getMyPacks: (id: string) => {\r\n        return instance.get(`/cards/pack?user_id=${id}&pageCount=100`)\r\n    },\r\n    deletePack: (packID: string) => {\r\n        return instance.delete(`/cards/pack?id=${packID}`)\r\n    },\r\n    editPack: (cardsPack: EditPackType) => {\r\n        return instance.put('/cards/pack', {cardsPack})\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {PacksType, PacksAPI} from \"../api/PacksAPI\";\r\nimport {isFetching} from \"./isFetchingReducer\";\r\n\r\nexport type ActionsType = GetPacksType | SetSearchPacks | UpdPacksType | SetSortPacksNameUp | SetSortPacksNameDown\r\n\r\nexport type PackType = {\r\n    cardsCount: number\r\n    created: string\r\n    grade: number\r\n    more_id: string\r\n    name: string\r\n    path: string\r\n    private: boolean\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    updated: string\r\n    user_id: string\r\n    user_name: string\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\nexport type PacksInitialStateType = {\r\n    packs: Array<PackType>\r\n    packUser_id: string\r\n    searchName: string | null\r\n    cardsPacksTotalCount : number\r\n    maxCardsCount?: number | null\r\n    minCardsCount?: number\r\n    page?: number\r\n    pageCount: number\r\n}\r\n\r\nlet PacksInitialState: PacksInitialStateType = {\r\n    packs: [],\r\n    packUser_id: '',\r\n    searchName: null,\r\n    page: 1,\r\n    pageCount: 10,\r\n    cardsPacksTotalCount:1000\r\n}\r\n\r\n\r\nexport const PacksReducer = (state = PacksInitialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"PACKS/GET_PACKS\": {\r\n            return {\r\n                ...state,\r\n                packs: action.packs\r\n            }\r\n        }\r\n        case \"/PACKS/SEARCH_PACKS\": {\r\n            return {\r\n                ...state\r\n            }\r\n        }\r\n         case \"/PACKS/SORT_PACKS_NAME_UP\": {\r\n            return {\r\n                ...state,\r\n                ...state.packs,\r\n                    packs:state.packs.sort(function (a, b) {\r\n                    let nameA = a.name.toLowerCase(),\r\n                        nameB = b.name.toLowerCase()\r\n                            if (nameA < nameB)\r\n                                return -1\r\n                            if (nameA > nameB)\r\n                                return 1\r\n                            return 0\r\n                })\r\n            }\r\n        }\r\n\r\n        case \"/PACKS/SORT_PACKS_NAME_DOWN\": {\r\n            return {\r\n                ...state,\r\n                ...state.packs,\r\n                packs:state.packs.sort(function (a, b) {\r\n                    let nameA = a.name.toLowerCase(),\r\n                        nameB = b.name.toLowerCase()\r\n                    if (nameA > nameB)\r\n                        return -1\r\n                    if (nameA < nameB)\r\n                        return 1\r\n                    return 0\r\n                })\r\n            }\r\n        }\r\n\r\n        case \"PACKS/ADD_PACK\": {\r\n            return {\r\n                ...state,\r\n                packs: action.data, ...state.packs\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getPacksAC = (packs: Array<PackType>) => {\r\n    return {\r\n        type: \"PACKS/GET_PACKS\", packs\r\n    } as const\r\n}\r\n\r\nexport const setSearchPacks = (searchName: string) => {\r\n    return {\r\n        type: '/PACKS/SEARCH_PACKS', searchName\r\n    } as const\r\n}\r\nexport const setSortPacksNameUp = () => {\r\n    return {\r\n        type: '/PACKS/SORT_PACKS_NAME_UP'\r\n    } as const\r\n}\r\nexport const setSortPacksNameDown = () => {\r\n    return {\r\n        type: '/PACKS/SORT_PACKS_NAME_DOWN'\r\n    } as const\r\n}\r\n\r\nexport const updPack = (data: Array<PackType>) => {\r\n    return {\r\n        type: 'PACKS/ADD_PACK', data\r\n    } as const\r\n}\r\n\r\nexport const editPackAC = () => {\r\n    return {\r\n        type: 'PACKS/EDIT_PACK'\r\n    }\r\n}\r\n\r\nexport const getPacks = (searchName: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(isFetching(true))\r\n        PacksAPI.getPacks(searchName).then(res => {\r\n                dispatch(getPacksAC(res.data.cardPacks))\r\n                dispatch(isFetching(false))\r\n            }\r\n        ).catch(e => {\r\n                console.log(e.response.data)\r\n                dispatch(isFetching(false))\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const sortPacksUp = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(isFetching(true))\r\n        PacksAPI.getPacks('').then(res => {\r\n                dispatch(setSortPacksNameUp())\r\n                dispatch(isFetching(false))\r\n            }\r\n        ).catch(e => {\r\n                console.log(e.response.data)\r\n                dispatch(isFetching(false))\r\n            }\r\n        )\r\n    }\r\n}\r\nexport const sortPacksDown = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(isFetching(true))\r\n        PacksAPI.getPacks('').then(res => {\r\n                dispatch(setSortPacksNameDown())\r\n                dispatch(isFetching(false))\r\n            }\r\n        ).catch(e => {\r\n                console.log(e.response.data)\r\n                dispatch(isFetching(false))\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const addPacks = (name?: string, type?: string) => {\r\n    return async (dispatch: Dispatch) => {\r\n        let promise = await PacksAPI.addPacks({name, type})\r\n        let getPacks = await PacksAPI.getMyPacks(promise.data.newCardsPack.user_id)\r\n        dispatch(updPack(getPacks.data.cardPacks))\r\n    }\r\n}\r\n\r\nexport const showMyPacksTC = (userID: string) => {\r\n    return async (dispatch: Dispatch) => {\r\n        let myPacks = await PacksAPI.getMyPacks(userID)\r\n        dispatch(updPack(myPacks.data.cardPacks))\r\n    }\r\n}\r\nexport const deletePack = (packID: string) => {\r\n    return async (dispatch: Dispatch) => {\r\n        let deletePack = await PacksAPI.deletePack(packID)\r\n        let myPacks = await PacksAPI.getMyPacks(deletePack.data.deletedCardsPack.user_id)\r\n        dispatch(updPack(myPacks.data.cardPacks))\r\n    }\r\n}\r\nexport const editPack = (_id: string, props: PacksType) => {\r\n    return async (dispatch: Dispatch) => {\r\n        let editPack = await PacksAPI.editPack({_id,...props})\r\n        let myPacks = await PacksAPI.getMyPacks(editPack.data.updatedCardsPack.user_id)\r\n        dispatch(updPack(myPacks.data.cardPacks))\r\n    }\r\n}\r\n\r\n\r\ntype UpdPacksType = ReturnType<typeof updPack>\r\ntype GetPacksType = ReturnType<typeof getPacksAC>\r\ntype SetSearchPacks = ReturnType<typeof setSearchPacks>\r\ntype SetSortPacksNameUp = ReturnType<typeof setSortPacksNameUp>\r\ntype SetSortPacksNameDown = ReturnType<typeof setSortPacksNameDown>\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {ProfileReducer} from \"./ProfileReducer\";\r\nimport {LoginReducer} from \"./LoginReducer\";\r\nimport {RegisterReducer} from \"./RegisterReducer\";\r\nimport {RestoreReducer} from \"./RestoreReducer\";\r\nimport {ChangePasswordReducer} from \"./ChangePasswordReducer\";\r\nimport thunkMiddleWare from \"redux-thunk\"\r\nimport {IsFetchingReducer} from \"./isFetchingReducer\";\r\nimport { PacksReducer } from './PacksReducer';\r\n\r\nlet reducers = combineReducers({\r\n    profile: ProfileReducer,\r\n    login: LoginReducer,\r\n    register: RegisterReducer,\r\n    restore: RestoreReducer,\r\n    changePassword: ChangePasswordReducer,\r\n    isFetching: IsFetchingReducer,\r\n    packs: PacksReducer\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleWare))\r\n\r\nexport type StateType = ReturnType<typeof reducers>\r\n\r\nexport default store\r\n\r\n// @ts-ignore\r\nwindow.store = store","import {Dispatch} from \"redux\";\r\nimport {ProfileAPI} from \"../api/ProfileAPI\";\r\n\r\nexport type ActionsType =\r\n    SetProfileUserDataAcType\r\n\r\n\r\nexport type ProfileDataType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n    created: string;\r\n    updated: string;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n    error: string;\r\n} | null\r\n\r\nlet ProfileInitialState: ProfileDataType = null\r\n\r\nexport const ProfileReducer = (state = ProfileInitialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"PROFILE/SET-PROFILE-USER-DATA\": {\r\n            return {\r\n                ...state, ...action.data\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const SetProfileUserDataAC = (data: ProfileDataType) => {\r\n    return {\r\n        type: \"PROFILE/SET-PROFILE-USER-DATA\", data\r\n    } as const\r\n}\r\n\r\nexport const GetProfileDataTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        ProfileAPI.GetProfile({}).then(res => {\r\n            if (!res?.error) {\r\n                dispatch(SetProfileUserDataAC(res))\r\n            }\r\n        }).catch(e => {\r\n                console.log(e.response)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\ntype SetProfileUserDataAcType = ReturnType<typeof SetProfileUserDataAC>\r\n\r\n","import React from 'react';\r\nimport s from './Button.module.scss'\r\n\r\ntype ButtonType = {\r\n    title?: string\r\n    onClick?: () => void\r\n    disable?: boolean\r\n}\r\n\r\nconst Button = (props: ButtonType) => {\r\n    return (\r\n        <div className={s.loginButtonBody}>\r\n            <span className={s.link}>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                <button onClick={props.onClick} disabled={props.disable} className={s.button}>\r\n                    {props.title}\r\n                </button>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button","import React, {ChangeEvent} from \"react\";\r\nimport s from './Input.module.scss'\r\nimport {RefType} from \"../Checkbox/Checkbox\";\r\n\r\ntype InputType = {\r\n    label?: string\r\n    type?: string\r\n    value?: string\r\n    onChange?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    error?: string | null\r\n    register?: RefType\r\n    name?: string\r\n    disable?: boolean\r\n}\r\n\r\nconst Input = (props: InputType) => {\r\n    return (\r\n        <div className={props.error ? s.error : s.inputBody}>\r\n            <input value={props.value}\r\n                   type={props.type}\r\n                   onChange={props.onChange}\r\n                   ref={props.register}\r\n                   name={props.name}\r\n                   disabled={props.disable}\r\n            />\r\n\r\n            {!props.value ? <label>{props.label}</label> : ''}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input","import React, {ChangeEvent, RefObject} from 'react';\r\nimport s from './Checkbox.module.scss'\r\n\r\nexport type RefType = string | ((instance: HTMLInputElement | null) => void) | RefObject<HTMLInputElement> | null | undefined\r\ntype CheckboxType = {\r\n    checked?: boolean\r\n    onChange?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    name?: string\r\n    register?:  RefType\r\n    disable?: boolean\r\n}\r\n\r\nconst Checkbox = (props: CheckboxType) => {\r\n    return (\r\n        <div >\r\n            <input  checked={props.checked}\r\n                    onChange={props.onChange}\r\n                    className={s.checkbox}\r\n                    type={'checkbox'}\r\n                    name={props.name}\r\n                    ref={props.register}\r\n                    disabled={props.disable}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Checkbox","import React, {useCallback, useEffect} from 'react';\r\nimport Button from \"../../../Components/Button/Button\";\r\nimport Input from \"../../../Components/Input/Input\";\r\nimport Checkbox from \"../../../Components/Checkbox/Checkbox\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StateType} from \"../../../store/redux-store\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {ErrorInType, setLogin, setError} from \"../../../store/LoginReducer\";\r\nimport * as yup from \"yup\";\r\nimport {yupResolver} from '@hookform/resolvers/yup';\r\nimport s from './Login.module.scss'\r\nimport {Redirect} from 'react-router-dom';\r\n\r\ntype LoginFormType = {\r\n    className?: string\r\n    isFetching: boolean\r\n}\r\ntype FormType = {\r\n    'login': string\r\n    'password': string\r\n    'rememberMe': boolean\r\n}\r\n\r\n\r\nexport const schemaLogin = yup.object().shape({\r\n    login: yup.string().required().email(),\r\n    password: yup.string().required().min(7)\r\n})\r\n\r\nconst LoginForm = React.memo((props: LoginFormType) => {\r\n\r\n    const {register, control, handleSubmit, errors, reset} = useForm<FormType>({\r\n        resolver: yupResolver(schemaLogin)\r\n    })\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const authMe = useSelector<StateType, boolean>(state => state.login.authMe)\r\n    const error = useSelector<StateType, string | null>(state => state.login.error)\r\n    const errorIn = useSelector<StateType, ErrorInType | undefined>(state => state.login.errorIn)\r\n\r\n    const onSubmit = useCallback(function (data: FormType) {\r\n        dispatch(setLogin(data.login, data.password, data.rememberMe))\r\n        if (authMe) {\r\n            reset()\r\n        }\r\n\r\n    }, [dispatch, authMe, reset])\r\n\r\n    useEffect(() => {\r\n        dispatch(setError(null))\r\n    }, [dispatch])\r\n\r\n\r\n    if (authMe) return <Redirect to={'/profile'}/>\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Controller\r\n                    as={<Input onChange={() => errors.login?.message === null}\r\n                               disable={props.isFetching}\r\n                               error={errors.login?.message || error}\r\n                               label={'login'}/>}\r\n                    name=\"login\"\r\n                    control={control}\r\n                    defaultValue=\"\"\r\n                />\r\n\r\n                <div className={s.errorMessageColor}>\r\n                    {errors.login && <span>{errors.login.message}</span>}\r\n                    {errorIn === \"email\" && <span>{error}</span>}\r\n                </div>\r\n\r\n                <Controller\r\n                    as={<Input onChange={() => errors.login?.message === null}\r\n                               disable={props.isFetching}\r\n                               type={'password'}\r\n                               error={errors.password?.message || error}\r\n                               label={'password'}/>}\r\n                    name=\"password\"\r\n                    control={control}\r\n                    defaultValue=\"\"\r\n                />\r\n                <div className={s.errorMessageColor}>\r\n                    {errors.password && <span>{errors.password.message}</span>}\r\n                    {errorIn === \"password\" && <span>{error}</span>}\r\n                </div>\r\n\r\n                <Checkbox name={'rememberMe'} register={register} disable={props.isFetching}/>\r\n                <Button title={'login'} disable={props.isFetching}/>\r\n            </form>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default LoginForm","import React from 'react';\r\nimport s from './Login.module.scss'\r\nimport {NavLink} from 'react-router-dom';\r\nimport LoginForm from \"./LoginForm\";\r\n\r\ntype LoginType = {\r\n    isFetching: boolean\r\n}\r\n\r\nconst Login = (props: LoginType) => {\r\n\r\n    return (\r\n        <div className={s.loginPage}>\r\n            <div className={s.loginFormContainer} >\r\n                <h1> LOGIN </h1>\r\n                <LoginForm isFetching={props.isFetching} className={s.loginFormContainer} />\r\n                <div className={s.items}>\r\n                    <NavLink className={s.text1} to='/restore'>Forgot your password?</NavLink>\r\n                    <NavLink className={s.text} to='/register'>Register</NavLink>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","import React, {useEffect} from 'react';\r\nimport s from './Restore.module.scss'\r\nimport Input from \"../../../Components/Input/Input\";\r\nimport Button from \"../../../Components/Button/Button\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {InitialRestoreStateType, RestoreTC, setErrorRestore} from '../../../store/RestoreReducer';\r\nimport {StateType} from \"../../../store/redux-store\";\r\nimport * as yup from \"yup\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\n\r\ntype RestoreProps = {\r\n    isFetching: boolean\r\n}\r\n\r\nexport type RestoreFormInput = {\r\n    email: string;\r\n}\r\n\r\nexport const schema = yup.object().shape({\r\n    email: yup.string().required().email(),\r\n});\r\n\r\nconst Restore = React.memo((props: RestoreProps) => {\r\n        const dispatch = useDispatch()\r\n        const restore = useSelector<StateType, InitialRestoreStateType>(state => state.restore)\r\n\r\n        const {control, handleSubmit, errors} = useForm<RestoreFormInput>({\r\n            resolver: yupResolver(schema)\r\n        });\r\n\r\n        const onSubmit = (data: RestoreFormInput) => {\r\n            dispatch(RestoreTC(data))\r\n        };\r\n\r\n        useEffect(() => {\r\n            dispatch(setErrorRestore(null))\r\n        },[dispatch])\r\n\r\n\r\n        return (\r\n            <div className={s.restorePage}>\r\n                <div className={s.restoreBlock}>\r\n                    <h1>Forgot you password?</h1>\r\n                    {restore.success\r\n                        ? <h2>Link on email</h2>\r\n                        : <form onSubmit={handleSubmit(onSubmit)}>\r\n                            <Controller\r\n                                as={<Input onChange={() => errors.email?.message === null}\r\n                                           error={errors.email?.message || restore.error} label={'Enter your login'}/>}\r\n                                name=\"email\"\r\n                                control={control}\r\n                                defaultValue=\"\"\r\n                            />\r\n\r\n                            <div className={s.errorMessageColor}>\r\n                                {errors.email?.message || restore.error}\r\n                            </div>\r\n\r\n                            <Button disable={props.isFetching} title={'SEND'}/>\r\n                        </form>\r\n                    }\r\n\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n)\r\n\r\nexport default Restore","import React from \"react\";\r\nimport s from './ModalWindow.module.scss'\r\nimport Input from \"../../../../Components/Input/Input\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {addPacks} from \"../../../../store/PacksReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype ModalWindowPropsType = {\r\n    setShowModalWindow: (showModalWindow: boolean) => void\r\n}\r\n\r\ntype SearchInputForm = {\r\n    packName: string\r\n    packType: string\r\n}\r\n\r\nexport const ModalWindow = (props: ModalWindowPropsType) => {\r\n    const dispatch = useDispatch()\r\n    const {handleSubmit, control, reset} = useForm<SearchInputForm>();\r\n\r\n    const onSubmit = (data: SearchInputForm) => {\r\n        dispatch(addPacks(data.packName, data.packType))\r\n        reset()\r\n        props.setShowModalWindow(false)\r\n    }\r\n\r\n    return (\r\n        <div className={s.modalWindowContainer}>\r\n            <div className={s.modalWindow}>\r\n                <h3>Add card</h3>\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <Controller\r\n                        as={<Input\r\n                            label={'Pack Name'}/>}\r\n                        name=\"packName\"\r\n                        control={control}\r\n                        defaultValue=\"\"\r\n                    />\r\n                    <Controller as={<Input\r\n                        label={'Pack Type'}/>}\r\n                                name=\"packType\"\r\n                                control={control}\r\n                                defaultValue=\"\"\r\n                    />\r\n                    <button type={'submit'}>SEND</button>\r\n                </form>\r\n                <button onClick={() => props.setShowModalWindow(false)}>CLOSE</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState, ChangeEvent, KeyboardEvent} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StateType} from \"../../store/redux-store\";\r\nimport {PacksInitialStateType} from \"../../store/PacksReducer\";\r\nimport s from \"./Paginator.module.css\"\r\nimport {InitIsFetchingReducerState} from \"../../store/isFetchingReducer\";\r\n\r\nexport const Paginator = React.memo(() => {\r\n    const packs = useSelector<StateType, PacksInitialStateType>(state => state.packs\r\n    )\r\n\r\n    const isFetching = useSelector<StateType,InitIsFetchingReducerState>(state => state.isFetching)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [newPage, setNewPage] = useState<number | string>('')\r\n\r\n    const pagesCount = Math.ceil(packs.cardsPacksTotalCount / packs.pageCount);\r\n\r\n    const [startPage, setStartPage] = useState<number>(packs.page = 1)\r\n\r\n    // const [endPage, setEndPage] = useState(startPage + packs.pageCount)\r\n\r\n    const endPage = 10\r\n\r\n\r\n    let pages: Array<number> = [];\r\n    for (\r\n        let i = startPage;\r\n        i <= startPage + endPage;\r\n        i++\r\n    ) {\r\n        pages.push(i)\r\n    }\r\n\r\n    // пролистывание вверх\r\n    const listUpp = () => {\r\n        let newStartCount = startPage + endPage\r\n        if (newStartCount >= pagesCount) {\r\n           if(newStartCount<packs.pageCount) {newStartCount=1}\r\n           else {\r\n               newStartCount = pagesCount - endPage\r\n           }\r\n        }\r\n        setStartPage(newStartCount)\r\n        // setEndPage(newStartCount + endPage)\r\n        // dispatch(getPageTC(startPage))\r\n    }\r\n\r\n    // пролистывание вниз\r\n    const listDown = () => {\r\n        let newStartCount = startPage - endPage\r\n        if (newStartCount <= 1) {\r\n            newStartCount = 1\r\n        }\r\n        setStartPage(newStartCount)\r\n        // setEndPage(newStartCount + packs.pageCount)\r\n        // dispatch(getPageTC(startPage))\r\n    }\r\n\r\n    // перейти к первой странице\r\n    const toStartPage = () => {\r\n        setStartPage(1)\r\n        // setEndPage(startPage + endPage)\r\n        // dispatch(getPageTC(startPage))\r\n    }\r\n\r\n    // перейти к последней странице\r\n    const toEndPage = () => {\r\n        setStartPage(pagesCount - endPage)\r\n        // setEndPage(pagesCount)\r\n        // dispatch(getPageTC(pagesCount))\r\n    }\r\n\r\n    //контроль поля ввода\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (+e.currentTarget.value < 1 || +e.currentTarget.value > pagesCount) {\r\n            setNewPage('нет такой страницы')\r\n        } else {\r\n            setNewPage(+e.target.value)\r\n        }\r\n    }\r\n\r\n    //загрузка страницы по номеру из input\r\n\r\n    const goToPageNumber = () => {\r\n        let newStartPage = +newPage\r\n        if (+newPage + endPage > pagesCount) {\r\n            newStartPage = pagesCount - endPage\r\n        }\r\n        setStartPage(newStartPage)\r\n        // setEndPage(newStartPage + endPage)\r\n        // dispatch(getPageTC(startPage))\r\n        setNewPage('')\r\n    }\r\n\r\n    //загрузка страницы по номеру из input при нажатии enter\r\n    const onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.keyCode === 13) {\r\n            goToPageNumber()\r\n        }\r\n    }\r\n\r\n\r\n    // загрузка страницы по клику\r\n    const onPageChange = (value: number) => {\r\n        // dispatch(getPageTC(value))\r\n    }\r\n\r\n    return <div className={s.sliderWrapper}>\r\n        <div>\r\n            <button\r\n                onClick={() => toStartPage()}\r\n                // disabled={props.isFetching}\r\n            >\r\n                {\"<<\"}\r\n            </button>\r\n            <button\r\n                onClick={listDown}\r\n                // disabled={props.isFetching}\r\n            >\r\n                {'<'}\r\n            </button>\r\n        </div>\r\n        <div>{pages.map(p => <span\r\n            className={packs.page === p ? s.active : s.hover}\r\n            onClick={() => onPageChange(p)}\r\n            key={p}\r\n        >{p}</span>)}</div>\r\n        <div>\r\n            <button\r\n                onClick={listUpp}\r\n                // disabled={props.isFetching}\r\n            >\r\n                {\">\"}\r\n            </button>\r\n            <button\r\n                // disabled={props.isFetching}\r\n                onClick={() => toEndPage()}\r\n            >\r\n                {\">>\"}\r\n            </button>\r\n        </div>\r\n        <div className={s.inputWrapper}><input type='number'\r\n                                               placeholder='№'\r\n                                               onChange={onChange}\r\n                                               value={newPage == null ? '' : newPage}\r\n                                               className={s.input}\r\n                                               onKeyPress={onKeyPress}\r\n                                               // disabled={isFetching}\r\n        />\r\n            <button onClick={goToPageNumber}\r\n                    // disabled={isFetching}\r\n            >Go\r\n            </button>\r\n        </div>\r\n    </div>\r\n});","import React, {ChangeEvent} from \"react\";\r\nimport s from \"../../Profile.module.scss\";\r\nimport Input from \"../../../../Components/Input/Input\";\r\nimport Button from \"../../../../Components/Button/Button\";\r\n\r\ntype SearchPacksType = {\r\n    onClickSearch: () => void\r\n    onChangeSearchInput: (e: ChangeEvent<HTMLInputElement>) => void\r\n    searchValue: string\r\n}\r\n\r\nconst SearchPacks = (props: SearchPacksType) => {\r\n    return (\r\n        <div className={s.searchField}>\r\n            <Input onChange={props.onChangeSearchInput} label={'Search'} type={'text'} value={props.searchValue}/>\r\n            <Button onClick={props.onClickSearch} title={\"Search\"}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPacks","import React, {useState} from \"react\";\r\nimport {deletePack, editPack, PackType} from \"../../../store/PacksReducer\";\r\nimport s from \"../Profile.module.scss\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useForm} from \"react-hook-form\";\r\n\r\ntype PackPropsType = PackType\r\ntype EditInput = {\r\n    packName: string\r\n    userName: string\r\n    packType: string\r\n}\r\n\r\nconst Pack = (pack: PackPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(true)\r\n    const dispatch = useDispatch()\r\n    const {register, handleSubmit, reset} = useForm<EditInput>();\r\n\r\n    const deletePackHandler = () => {\r\n        dispatch(deletePack(pack._id))\r\n    }\r\n    const editPackMode = () => {\r\n        if (editMode) setEditMode(false)\r\n        if (!editMode) setEditMode(true)\r\n    }\r\n    const saveChanges = (data: EditInput) => {\r\n        dispatch(editPack(pack._id,{name: data.packName, type: data.packType}))\r\n        setEditMode(true)\r\n    }\r\n\r\n    return (\r\n        <div className={s.cardField}>\r\n            {editMode\r\n                ? <div><span>{pack.name}</span></div>\r\n                : <div>\r\n                    <form onSubmit={handleSubmit(saveChanges)}>\r\n                        <input name=\"packName\" ref={register({maxLength: 20})} defaultValue={pack.name}/>\r\n                        <input name=\"packType\" ref={register({maxLength: 20})} defaultValue={pack.type}/>\r\n                        <button type=\"submit\">save</button>\r\n                    </form>\r\n                </div>\r\n            }\r\n            <div>\r\n                {pack.type}\r\n            </div>\r\n            <div>\r\n                {pack.updated}\r\n            </div>\r\n            <div>\r\n                {pack.rating}\r\n            </div>\r\n            <span>{pack.user_name}</span>\r\n            <div>\r\n                <button onClick={deletePackHandler}>delete</button>\r\n                <button onClick={editPackMode}>edit</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Pack","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './Profile.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StateType} from \"../../store/redux-store\";\r\nimport Button from \"../../Components/Button/Button\";\r\nimport {AuthMe, InitialLoginReducerState, setLogOutUser} from \"../../store/LoginReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {getPacks, PackType, showMyPacksTC, sortPacksDown, sortPacksUp} from '../../store/PacksReducer';\r\nimport {ModalWindow} from './Packs/ModalWindow/ModalWindow';\r\nimport {Paginator} from \"../../Components/Paginator/Paginator\";\r\nimport SearchPacks from './Packs/Search/SearchPacks';\r\nimport Pack from \"./Packs/Pack\";\r\n\r\n\r\ntype ProfileType = {\r\n    isFetching: boolean\r\n}\r\n\r\nconst Profile = (props: ProfileType) => {\r\n    const authMe = useSelector<StateType, boolean>(state => state.login.authMe)\r\n    const profile = useSelector<StateType, InitialLoginReducerState>(state => state.login)\r\n    const pack = useSelector<StateType, Array<PackType>>(state => state.packs.packs)\r\n    const userID = useSelector<StateType, string>(state => state.login._id)\r\n    const dispatch = useDispatch()\r\n\r\n    const [showModalWindow, setShowModalWindow] = useState<boolean>(false)\r\n    const [searchValue, setSearchValue] = useState<string>('')\r\n\r\n    const showMyPacks = () => {\r\n        dispatch(showMyPacksTC(userID))\r\n    }\r\n    const onChangeSearchInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setSearchValue(e.currentTarget.value)\r\n    }\r\n\r\n    const onClickSearch = () => {\r\n        dispatch(getPacks(searchValue))\r\n    }\r\n\r\n    useEffect(() => {\r\n        !authMe && dispatch(AuthMe())\r\n    }, [dispatch, authMe])\r\n\r\n    useEffect(() => {\r\n        dispatch(getPacks(''))\r\n    }, [dispatch])\r\n\r\n    const logOut = () => {\r\n        dispatch(setLogOutUser())\r\n    }\r\n    const addPackMode = () => {\r\n        setShowModalWindow(true)\r\n    }\r\n    if (!authMe) return <Redirect to={'/login'}/>\r\n\r\n\r\n    return (\r\n\r\n        <div className={s.profilePage}>\r\n\r\n            {showModalWindow\r\n                ? <ModalWindow setShowModalWindow={setShowModalWindow}\r\n                />\r\n                : null}\r\n\r\n\r\n            <div className={s.profilePage}>\r\n                <div className={s.profileContainer}>\r\n                    <div className={s.titleProfile}>Profile</div>\r\n                    <div>\r\n                        <div>{profile.avatar}</div>\r\n                        <div>{profile.name}</div>\r\n                    </div>\r\n                    <Button onClick={logOut} title={'LogOut'}/>\r\n                </div>\r\n\r\n                <div className={s.profileContent}>\r\n\r\n                    <SearchPacks onChangeSearchInput={onChangeSearchInput}\r\n                                 onClickSearch={onClickSearch}\r\n                                 searchValue={searchValue}\r\n                    />\r\n\r\n                    <div className={s.packsContainer}>\r\n                        <div>\r\n                            Name\r\n                            <button onClick={() => dispatch(sortPacksUp())}>up</button>\r\n                            <button onClick={() => dispatch(sortPacksDown())}>down</button>\r\n                        </div>\r\n                        <div>\r\n                            type\r\n                        </div>\r\n                        <div>\r\n                            Update\r\n                            <button>up</button>\r\n                            <button>down</button>\r\n                        </div>\r\n                        <div>Rating</div>\r\n                        <div>email/user_name</div>\r\n                        <div>\r\n                            <button onClick={addPackMode}> Add Pack</button>\r\n                            <button onClick={showMyPacks}> My packs</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                        {pack.map(pack => <Pack key={pack._id} {...pack}/>)}\r\n                    </div>\r\n                    <Paginator/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","import React from 'react';\r\nimport s from './NotFound.module.scss'\r\n\r\n\r\nconst NotFound = (props: any) => {\r\n\r\n    return (\r\n        <div className={s.notFoundPage}>\r\n            <h1>404</h1>\r\n            <div>\r\n                <h1>not found</h1>\r\n                <div>тест</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound","import React, {useEffect} from 'react';\r\nimport s from './Restore.module.scss'\r\nimport Input from \"../../../Components/Input/Input\";\r\nimport Button from \"../../../Components/Button/Button\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ChangePasswordTC, InitialRestoreStateType, setErrorRestore} from \"../../../store/RestoreReducer\";\r\nimport {StateType} from \"../../../store/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport * as yup from \"yup\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\n\r\ntype ChangePasswordPropsType = {\r\n    isFetching: boolean\r\n}\r\n\r\nexport type ChangePasswordFormInput = {\r\n    password: string,\r\n    confirm_password: string\r\n}\r\n\r\nexport const schema = yup.object().shape({\r\n    password: yup.string().required().min(7),\r\n});\r\n\r\n\r\nconst RestoreChangePassword = React.memo((props: ChangePasswordPropsType) => {\r\n        const restore = useSelector<StateType, InitialRestoreStateType>(state => state.restore)\r\n        const dispatch = useDispatch()\r\n\r\n        const {control, handleSubmit, errors, reset, setError} = useForm<ChangePasswordFormInput>({\r\n            resolver: yupResolver(schema)\r\n        });\r\n\r\n        const onSubmit = (data: ChangePasswordFormInput) => {\r\n            if (data.password === data.confirm_password) {\r\n                dispatch(ChangePasswordTC(data))\r\n                reset()\r\n            } else {\r\n                setError('password', {message: 'Пароли не совпадают'})\r\n                setError('confirm_password', {message: 'Пароли не совпадают'})\r\n            }\r\n        };\r\n\r\n        useEffect(() => {\r\n            dispatch(setErrorRestore(null))\r\n        },[dispatch])\r\n\r\n        if (restore.success) {\r\n            return <Redirect to={'/login'}/>\r\n        }\r\n\r\n        return (\r\n            <div className={s.restorePage}>\r\n                <div className={s.restoreBlock}>\r\n                    <h1>Please, set your new Password</h1>\r\n\r\n                    <form onSubmit={handleSubmit(onSubmit)}>\r\n                        <Controller\r\n                            as={<Input error={restore.error}\r\n                                       type={'password'}\r\n                                       label={'password'}/>}\r\n                            name=\"password\"\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                        />\r\n\r\n                        <Controller\r\n                            as={<Input error={errors.password?.message || restore.error}\r\n                                       type={'password'}\r\n                                       label={'repeat password'}/>}\r\n                            name=\"confirm_password\"\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                        />\r\n                        <div className={s.errorMessageColor}>\r\n                            {errors.password?.message || restore.error}\r\n                        </div>\r\n                        <Button disable={props.isFetching} title={'SEND'}/>\r\n                    </form>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n)\r\n\r\nexport default RestoreChangePassword","import React from 'react';\r\nimport s from './Preloader.module.scss'\r\n\r\ntype PreloaderType = {\r\n\r\n}\r\n\r\nconst Preloader = (props: PreloaderType) => {\r\n    return (\r\n        <div className={s.cssload_container}>\r\n            <div className={s.cssload_speeding_wheel}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader","import React, {useEffect} from 'react'\r\nimport * as yup from \"yup\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport s from \"./Register.module.scss\";\r\nimport Button from \"../../../Components/Button/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {initialStateType, RegisterUserTC, SetErrorRegisterAC} from \"../../../store/RegisterReducer\";\r\nimport {StateType} from \"../../../store/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport Input from \"../../../Components/Input/Input\";\r\n\r\ntype RegisterPropsType = {\r\n    isFetching: boolean\r\n}\r\n\r\ntype FormsType = {\r\n    \"confirm_password\": string\r\n    \"password\": string\r\n    \"email\": string\r\n}\r\nexport const schema = yup.object().shape({\r\n    password: yup.string().required().min(7),\r\n    email: yup.string().required().email(),\r\n    confirm_password: yup.string().required().min(7)\r\n});\r\n\r\nconst Register = React.memo((props: RegisterPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const newUserData = useSelector<StateType, initialStateType>(state => state.register)\r\n\r\n\r\n\r\n    const {handleSubmit, errors, reset, setError, control} = useForm<FormsType>(\r\n        {\r\n            resolver: yupResolver(schema)\r\n        }\r\n    );\r\n\r\n    const onSubmit = (data: FormsType) => {\r\n        if (data.confirm_password === data.password) {\r\n            let newData = {\r\n                email: data.email,\r\n                password: data.password\r\n            }\r\n            dispatch(RegisterUserTC(newData))\r\n            reset()\r\n        } else {\r\n            setError('password', {message: 'Пароли не совпадают'})\r\n            setError('confirm_password', {message: 'Пароли не совпадают'})\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(SetErrorRegisterAC(''))\r\n    },[dispatch])\r\n\r\n    const onBlur = () => {\r\n        dispatch(SetErrorRegisterAC(''))\r\n        // clearErrors('password')\r\n        // clearErrors('confirm_password')\r\n        // clearErrors('email')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {newUserData.data.email.length > 0 && <Redirect to={'/login'}/>}\r\n            <div className={s.registerPage} onBlur={onBlur}>\r\n                <div className={s.registerBox}>\r\n                    <h1>REGISTER</h1>\r\n                    <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n                        <Controller\r\n                            as={<Input onChange={() => errors.email?.message === null}\r\n                                       error={errors.email?.message || newUserData.errorMessage}\r\n                                       type={'text'}\r\n                                       label={'Enter your login'}/>}\r\n                            name=\"email\"\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                        />\r\n                        <div className={s.errorMessageColor}>\r\n                            {errors.email?.message || newUserData.errorMessage}\r\n                        </div>\r\n\r\n                        <Controller\r\n                            as={<Input\r\n                                error={errors.password?.message}\r\n                                type={'password'}\r\n                                label={'password'}/>}\r\n                            name=\"password\"\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                        />\r\n                        <div className={s.errorMessageColor}>\r\n                            {errors.password?.message}\r\n                        </div>\r\n\r\n                        <Controller\r\n                            as={<Input onChange={() => errors.confirm_password?.message === null}\r\n                                       error={errors.confirm_password?.message}\r\n                                       type={'password'}\r\n                                       label={'confirm password'}/>}\r\n                            name=\"confirm_password\"\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                        />\r\n                        <div className={s.errorMessageColor}>\r\n                            {errors.confirm_password?.message}\r\n                        </div>\r\n\r\n                        <Button title={\"SEND\"}\r\n                                disable={props.isFetching}/>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Register\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {HashRouter, Route, Switch} from 'react-router-dom';\r\nimport Login from './main/authGroup/LoginPage/Login';\r\nimport Restore from \"./main/authGroup/RestorePage/Restore\";\r\nimport Profile from \"./main/ProfilePage/Profile\";\r\nimport NotFound from './main/NotFound/NotFound';\r\nimport RestoreChangePassword from \"./main/authGroup/RestorePage/RestoreChangePassword\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {StateType} from \"./store/redux-store\";\r\nimport Preloader from \"./Components/Preloader/Preloader\";\r\nimport Register from './main/authGroup/RegisterPage/Register';\r\n\r\n\r\nconst App = () => {\r\n\r\n    const isFetching = useSelector<StateType, boolean>(state => state.isFetching.isFetching)\r\n\r\n\r\n    return (\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n                {isFetching && <Preloader/>}\r\n                <Switch>\r\n                    <Route path='/restore' render={() => (<Restore isFetching={isFetching}/>)}/>\r\n                    <Route exact path='/register' render={() => (<Register isFetching={isFetching}/>)}/>\r\n                    <Route exact path={['/login', '/']} render={() => (<Login isFetching={isFetching}/>)}/>\r\n                    <Route exact path='/profile' render={() => (<Profile isFetching={isFetching}/>)}/>\r\n                    <Route path='/changePassword' render={() => (<RestoreChangePassword isFetching={isFetching}/>)}/>\r\n                    <Route render={() => (<NotFound/>)}/>\r\n                </Switch>\r\n            </div>\r\n        </HashRouter>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store/redux-store\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>\n\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Profile_neon__2N-I0\",\"profilePage\":\"Profile_profilePage__1-AUr\",\"profileContainer\":\"Profile_profileContainer__1bZij\",\"titleProfile\":\"Profile_titleProfile__3wYad\",\"profileContent\":\"Profile_profileContent__19_nR\",\"searchField\":\"Profile_searchField__2vZcx\",\"packsContainer\":\"Profile_packsContainer__1VOh7\",\"cardField\":\"Profile_cardField__2SM4_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Login_neon__2oOc0\",\"loginPage\":\"Login_loginPage__3QmJr\",\"loginFormContainer\":\"Login_loginFormContainer__1OO4x\",\"errorField\":\"Login_errorField__2fokP\",\"items\":\"Login_items__xfe4x\",\"text1\":\"Login_text1__2MhTi\",\"text\":\"Login_text__3qblI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Restore_neon__2xnCX\",\"restorePage\":\"Restore_restorePage__Yt06I\",\"restoreBlock\":\"Restore_restoreBlock__j8go8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sliderWrapper\":\"Paginator_sliderWrapper__1_Okq\",\"inputWrapper\":\"Paginator_inputWrapper__ocgdt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Register_neon__3snfG\",\"registerPage\":\"Register_registerPage__22eL8\",\"registerBox\":\"Register_registerBox__byB-h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Button_neon__17sQT\",\"button\":\"Button_button__2OrEq\",\"loginButtonBody\":\"Button_loginButtonBody__3X43V\",\"link\":\"Button_link__w9gha\",\"btn-anim-1\":\"Button_btn-anim-1__2KaU3\",\"btn-anim-2\":\"Button_btn-anim-2__29h2Y\",\"btn-anim-3\":\"Button_btn-anim-3__2WLod\",\"btn-anim-4\":\"Button_btn-anim-4__kwUi5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Input_neon__2TJ1R\",\"inputBody\":\"Input_inputBody__2u4Qd\",\"error\":\"Input_error__hy98E\",\"shake\":\"Input_shake__tmaUI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"ModalWindow_neon__3Iuea\",\"modalWindowContainer\":\"ModalWindow_modalWindowContainer__2mZtt\",\"modalWindow\":\"ModalWindow_modalWindow__1vvkz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Preloader_neon__3Tzof\",\"cssload_container\":\"Preloader_cssload_container__c-n8B\",\"cssload_speeding_wheel\":\"Preloader_cssload_speeding_wheel__1wLSN\",\"cssload-spin\":\"Preloader_cssload-spin__2PCcK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Checkbox_neon__1DTaF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"NotFound_neon__k5F0a\",\"notFoundPage\":\"NotFound_notFoundPage__3y1lY\"};"],"sourceRoot":""}