{"version":3,"sources":["serviceWorker.ts","api/ProfileAPI.ts","store/ProfileReducer.ts","api/authAPI.ts","store/isFetchingReducer.ts","store/LoginReducer.ts","api/registerAPI.ts","store/RegisterReducer.ts","api/restoreAPI.ts","store/RestoreReducer.ts","store/ChangePasswordReducer.ts","store/redux-store.ts","Components/Button/Button.tsx","Components/Input/Input.tsx","Components/Checkbox/Checkbox.tsx","main/authGroup/LoginPage/LoginForm.tsx","main/authGroup/LoginPage/Login.tsx","main/authGroup/RestorePage/Restore.tsx","main/ProfilePage/Profile.tsx","main/NotFound/NotFound.tsx","main/Menu/Menu.tsx","main/authGroup/RestorePage/RestoreChangePassword.tsx","Components/Preloader/Preloader.tsx","main/authGroup/RegisterPage/Register.tsx","App.tsx","index.tsx","main/Menu/Menu.module.scss","main/authGroup/LoginPage/Login.module.scss","main/authGroup/RestorePage/Restore.module.scss","main/authGroup/RegisterPage/Register.module.scss","Components/Button/Button.module.scss","Components/Input/Input.module.scss","Components/Preloader/Preloader.module.scss","Components/Checkbox/Checkbox.module.scss","main/NotFound/NotFound.module.scss","main/ProfilePage/Profile.module.scss"],"names":["Boolean","window","location","hostname","match","instance","axios","create","withCredentials","baseURL","ProfileAPI","data","post","then","res","GetProfileDataTC","dispatch","error","type","authAPI","email","password","rememberMe","delete","initialState","isFetching","isFetch","_id","name","verified","publicCardPacksCount","isAdmin","created","updated","authMe","setUser","user","setError","setErrorInPass","errorIn","authMeAction","RegisterAPI","id","errorMessage","SetErrorMessageAC","message","RestoreApi","passwordToken","href","split","repeat_password","resetPasswordToken","success","disableButton","setSuccessRequest","reducers","combineReducers","profile","state","action","login","register","restore","changePassword","store","createStore","applyMiddleware","thunkMiddleWare","Button","props","className","s","loginButtonBody","link","onClick","disabled","disable","button","title","Input","inputBody","value","onChange","ref","label","Checkbox","checked","checkbox","LoginForm","React","memo","schemaLogin","yup","shape","required","min","useForm","resolver","yupResolver","control","handleSubmit","errors","reset","useDispatch","useSelector","onSubmit","useCallback","a","promise","console","log","response","to","as","defaultValue","errorMessageColor","Login","loginPage","loginFormContainer","items","text1","text","schema","Restore","restorePage","restoreBlock","status","catch","e","RestoreTC","Profile","useEffect","profilePage","profileContent","cardField","profileContainer","titleProfile","NotFound","notFoundPage","Menu","useState","isHide","setIsHide","showHideMenuTrigger","menu","menuActive","activeClassName","activeLink","RestoreChangePassword","Preloader","cssload_container","cssload_speeding_wheel","confirm_password","Register","newUserData","clearErrors","length","registerPage","onBlur","registerBox","newData","SetRegisterDataAC","addedUser","RegisterUserTC","App","path","render","exact","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"kMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2CCdAC,EAAWC,IAAMC,OAAO,CAC1BC,iBAAgB,EAChBC,QAAQ,+BAGCC,EACE,SAACC,GACR,OAAON,EAASO,KAAsB,UAAWD,GAAME,MAAK,SAAAC,GAAG,OAC3DA,EAAIH,SC4BHI,EAAmB,WAC5B,OAAO,SAACC,GACJN,EAAsB,IAAIG,MAAK,SAAAC,IAC3B,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAKG,QACLD,EATN,CACFE,KAAK,gCAAiCP,KAQAG,S,wBCxBxCT,EAAWC,IAAMC,OAAO,CAC1BC,iBAAiB,EACjBC,QAAS,+BAGAU,EAAU,SACbC,EAAeC,GAAgD,IAA9BC,EAA6B,wDAChE,OAAOjB,EAASO,KAAyB,aAAc,CAACQ,QAAOC,WAAUC,gBAFpEH,EAAU,WAKf,OAAOd,EAASkB,OAAuB,YALlCJ,EAAU,WAQf,OAAOd,EAASO,KAAyB,YC5B3CY,EAA2C,CAC7CC,YAAY,GAaHA,EAAa,SAACC,GAAD,MAAuB,CAACR,KAAM,qBAAsBQ,YCIxEF,EAAyC,CAC3CG,IAAK,GACLP,MAAO,GACPQ,KAAM,GACNN,YAAY,EACZL,MAAO,GACPY,UAAU,EACVC,qBAAsB,EACtBC,SAAS,EACTC,QAAS,GACTC,QAAS,GACTC,QAAQ,GAgECC,EAAU,SAACC,GAAD,MAA+B,CAAClB,KAAM,iBAAkBkB,SAClEC,EAAW,SAACpB,GAAD,MAAoB,CAACC,KAAM,kBAAmBD,UACzDqB,EAAiB,SAACC,GAAD,MAA2B,CAACrB,KAAM,qBAAsBqB,YACzEC,EAAe,SAACN,GAAD,MAAsB,CAAChB,KAAM,gBAAiBgB,WClGpE7B,EAAWC,IAAMC,OAAO,CAC1BC,iBAAgB,EAChBC,QAAQ,+BAaCgC,EACI,SAAC9B,GACV,OAAON,EAASO,KAA2B,iBAAkBD,ICNjEa,EAAe,CACfb,KAAM,CACFS,MAAO,GACPsB,GAAI,IAERC,aAAc,IAqBLC,EAAoB,SAACC,GAC9B,MAAO,CAAC3B,KAAM,kCAAmC2B,YCpC/CxC,EAAWC,IAAMC,OAAO,CAC1BC,iBAAiB,EACjBC,QAAS,+BAmBAqC,EAAa,SACdnC,GACJ,IAAMS,EAAQT,EAAKS,MACnB,OAAOf,EAASO,KAA0B,cAAe,CACrDQ,QACAyB,QAAQ,qQALPC,EAAa,SAWPnC,GACX,IAAMoC,EAAgB9C,OAAOC,SAAS8C,KAAKC,MAAM,KAAK,GAChD5B,EAAWV,EAAKuC,gBACtB,OAAO7C,EAASO,KAAiC,wBAAyB,CAACS,SAAUA,EAAU8B,mBAAoBJ,KC1BvHvB,EAAwC,CACxCP,MAAO,KACPmC,SAAS,EACTC,eAAe,GAcNhB,EAAW,SAACpB,GAAD,MAA2B,CAC/CC,KAAM,oBAAqBD,UAElBqC,EAAoB,SAACF,GAAD,MAAuB,CACpDlC,KAAM,8BAA+BkC,YC/BrC5B,EAAe,G,QCKf+B,EAAWC,YAAgB,CAC3BC,QTa0B,WAAuD,IAAtDC,EAAqD,uDAF1C,KAEkBC,EAAwB,uCACnF,OAAQA,EAAOzC,MACX,IAAK,gCACF,OAAO,eACAyC,EAAOhD,MAGb,QAAQ,OAAO+C,ISnBpBE,MN0BwB,WAAmG,IAAlGF,EAAiG,uDAA/DlC,EAAcmC,EAAiD,uCAC1H,OAAQA,EAAOzC,MACX,IAAK,iBACD,OAAO,2BAAIwC,GAAUC,EAAOvB,MAChC,IAAK,kBACD,OAAO,2BAAIsB,GAAX,IAAkBzC,MAAO0C,EAAO1C,QACpC,IAAK,qBACD,OAAO,2BAAIyC,GAAX,IAAkBnB,QAASoB,EAAOpB,UACtC,IAAK,gBACD,OAAO,2BAAImB,GAAX,IAAkBxB,OAAQyB,EAAOzB,SACrC,QACI,OAAOwB,IMpCfG,SJY2B,WAAoF,IAAnFH,EAAkF,uDAAxDlC,EAAcmC,EAA0C,uCAC9G,OAAQA,EAAOzC,MACX,IAAK,6BACD,OAAO,uCAAIwC,GAAUA,EAAM/C,MAA3B,IAAiCA,KAAMgD,EAAOhD,OAElD,IAAK,kCACD,OAAO,2BAAK+C,GAAZ,IAAmBf,aAAcgB,EAAOd,UAE5C,QACI,OAAOa,IIpBfI,QFO0B,WAAgD,IAA/CJ,EAA8C,uDAAtClC,EAAcmC,EAAwB,uCACzE,OAAQA,EAAOzC,MACX,IAAK,oBACD,OAAO,2BAAIwC,GAAX,IAAkBzC,MAAO0C,EAAO1C,QACpC,IAAK,8BACD,OAAO,2BAAIyC,GAAX,IAAkBN,QAASO,EAAOP,UACtC,QACI,OAAOM,IEbfK,eDNiC,WAAgD,IAA/CL,EAA8C,uDAAtClC,EAC1C,OAAOkC,GCMPjC,WPN6B,WAAwG,IAAvGiC,EAAsG,uDAAlElC,EAAcmC,EAAoD,uCACpI,OAAQA,EAAOzC,MACX,IAAK,qBACD,OAAO,2BAAIwC,GAAX,IAAkBjC,WAAYkC,EAAOjC,UACzC,QACI,OAAOgC,MOIbM,EAAQC,YAAYV,EAAUW,YAAgBC,MAIrCH,IAGf/D,OAAO+D,MAAQA,E,2DCAAI,EAhBA,SAACC,GACZ,OACI,yBAAKC,UAAWC,IAAEC,iBACd,0BAAMF,UAAWC,IAAEE,MACf,+BACA,+BACA,+BACA,+BACA,4BAAQC,QAASL,EAAMK,QAASC,SAAUN,EAAMO,QAASN,UAAWC,IAAEM,QACjER,EAAMS,U,iBCaZC,EAhBD,SAACV,GACX,OACI,yBAAKC,UAAWD,EAAMpD,MAAQsD,IAAEtD,MAAQsD,IAAES,WACtC,2BAAOC,MAAOZ,EAAMY,MACb/D,KAAMmD,EAAMnD,KACZgE,SAAUb,EAAMa,SAChBC,IAAKd,EAAMR,SACXjC,KAAMyC,EAAMzC,KACZ+C,SAAUN,EAAMO,UAGrBP,EAAMY,MAAuC,GAA/B,+BAAQZ,EAAMe,S,oBCC3BC,GAfE,SAAChB,GACd,OACI,6BACI,2BAAQiB,QAASjB,EAAMiB,QACfJ,SAAUb,EAAMa,SAChBZ,UAAWC,KAAEgB,SACbrE,KAAM,WACNU,KAAMyC,EAAMzC,KACZuD,IAAKd,EAAMR,SACXc,SAAUN,EAAMO,Y,0BCqErBY,GAlEGC,IAAMC,MAAK,SAACrB,GAA0B,IAAD,IAE7CsB,EAAcC,OAAaC,MAAM,CACnCjC,MAAOgC,OAAaE,WAAW1E,QAC/BC,SAAUuE,OAAaE,WAAWC,IAAI,KAJS,EAOMC,mBAAkB,CACvEC,SAAUC,uBAAYP,KADnB9B,EAP4C,EAO5CA,SAAUsC,EAPkC,EAOlCA,QAASC,EAPyB,EAOzBA,aAAcC,EAPW,EAOXA,OAAQC,EAPG,EAOHA,MAI1CtF,EAAWuF,cAEXrE,EAASsE,aAAgC,SAAA9C,GAAK,OAAIA,EAAME,MAAM1B,UAC9DjB,EAAQuF,aAA+B,SAAA9C,GAAK,OAAIA,EAAME,MAAM3C,SAC5DsB,EAAUiE,aAAgD,SAAA9C,GAAK,OAAIA,EAAME,MAAMrB,WAG/EkE,EAAWC,uBAAY,SAAU/F,GVYnB,IAACS,EAAeC,EAAkBC,EUXlDN,GVWiBI,EUXCT,EAAKiD,MVWSvC,EUXFV,EAAKU,SVWeC,EUXLX,EAAKW,WVWlC,uCAA0D,WAAON,GAAP,eAAA2F,EAAA,sEAE1E3F,EAASS,GAAW,IAFsD,SAGpDN,EAAcC,EAAOC,EAAUC,GAHqB,OAGpEsF,EAHoE,OAI1E5F,EAASwB,GAAa,IACtBxB,EAASmB,EAAQyE,EAAQjG,OACzBkG,QAAQC,IAAI,oBAAqBF,GANyC,kDAQtE,KAAEG,UACFF,QAAQC,IAAI,iBAAkB,KAAEC,SAASpG,KAAKM,OAC1C,KAAE8F,SAASpG,KAAKU,SAChBL,EAASsB,EAAe,aACjB,KAAEyE,SAASpG,KAAKS,OACvBJ,EAASsB,EAAe,UAE5BtB,EAASqB,EAAS,KAAE0E,SAASpG,KAAKM,SAElC4F,QAAQC,IAAI,UAAW,KAAEjE,QAAU,iCAjBmC,QAoB9E7B,EAASS,GAAW,IApB0D,0DAA1D,wDUVhB6E,MACD,CAACpE,IAGJ,OADA2E,QAAQC,IAAI5E,GACRA,EAAe,kBAAC,IAAD,CAAU8E,GAAI,aAG7B,yBAAK1C,UAAWD,EAAMC,WAClB,0BAAMmC,SAAUL,EAAaK,IACzB,kBAAC,cAAD,CACIQ,GAAI,kBAAC,EAAD,CAAO/B,SAAU,wBAAgC,QAA1B,UAAAmB,EAAOzC,aAAP,eAAcf,UAC9B+B,QAASP,EAAM5C,WACfR,OAAO,UAAAoF,EAAOzC,aAAP,eAAcf,UAAW5B,EAChCmE,MAAO,UAClBxD,KAAK,QACLuE,QAASA,EACTe,aAAa,KAGjB,yBAAK5C,UAAWC,IAAE4C,mBACbd,EAAOzC,OAAS,8BAAOyC,EAAOzC,MAAMf,SACxB,UAAZN,GAAuB,8BAAOtB,IAGnC,kBAAC,cAAD,CACIgG,GAAI,kBAAC,EAAD,CAAO/B,SAAU,wBAAgC,QAA1B,UAAAmB,EAAOzC,aAAP,eAAcf,UAC9B+B,QAASP,EAAM5C,WACfP,KAAM,WACND,OAAO,UAAAoF,EAAOhF,gBAAP,eAAiBwB,UAAW5B,EACnCmE,MAAO,aAClBxD,KAAK,WACLuE,QAASA,EACTe,aAAa,KAEjB,yBAAK5C,UAAWC,IAAE4C,mBACbd,EAAOhF,UAAY,8BAAOgF,EAAOhF,SAASwB,SAC9B,aAAZN,GAA0B,8BAAOtB,IAGtC,kBAAC,GAAD,CAAUW,KAAM,aAAciC,SAAUA,EAAUe,QAASP,EAAM5C,aACjE,kBAAC,EAAD,CAAQqD,MAAO,QAASF,QAASP,EAAM5C,kBC3DxC2F,GAhBD,SAAC/C,GAEX,OACI,yBAAKC,UAAWC,IAAE8C,WACd,yBAAK/C,UAAWC,IAAE+C,oBACd,uCACA,kBAAC,GAAD,CAAW7F,WAAY4C,EAAM5C,WAAY6C,UAAWC,IAAE+C,qBACtD,yBAAKhD,UAAWC,IAAEgD,OACd,kBAAC,IAAD,CAASjD,UAAWC,IAAEiD,MAAOR,GAAG,YAAhC,yBACA,kBAAC,IAAD,CAAS1C,UAAWC,IAAEkD,KAAMT,GAAG,aAA/B,gB,oBCCPU,GAAS9B,OAAaC,MAAM,CACrCzE,MAAOwE,OAAaE,WAAW1E,UA4CpBuG,GAzCC,SAACtD,GAAyB,IAAD,IAC/BrD,EAAWuF,cACXzC,EAAU0C,aAAgD,SAAA9C,GAAK,OAAIA,EAAMI,WAF1C,EAIGkC,mBAA0B,CAC9DC,SAAUC,uBAAYwB,MADnBvB,EAJ8B,EAI9BA,QAASC,EAJqB,EAIrBA,aAAcC,EAJO,EAIPA,OAQ9B,OACI,yBAAK/B,UAAWC,KAAEqD,aACd,yBAAKtD,UAAWC,KAAEsD,cACd,oDACC/D,EAAQV,QACH,6CACA,0BAAMqD,SAAUL,GAVjB,SAACzF,GACdK,ERaiB,SAACL,GAAD,OAA4B,SAACK,GAClDA,EAASS,GAAW,IACpBT,EAASsC,GAAkB,IAE3BR,EAAmBnC,GACdE,MAAK,SAAAC,GACqB,MAAfA,EAAIgH,SACJ9G,EAASS,GAAW,IACpBT,EAASqB,EAAS,OAClBrB,EAASsC,GAAkB,QAItCyE,OAAM,SAAAC,GACHhH,EAASS,GAAW,IACpBT,EAASqB,EAAS2F,EAAEjB,SAASpG,KAAKM,YQ5B7BgH,CAAUtH,QAUH,kBAAC,cAAD,CACIsG,GAAI,kBAAC,EAAD,CAAO/B,SAAU,wBAAgC,QAA1B,UAAAmB,EAAOjF,aAAP,eAAcyB,UAC9B5B,OAAO,UAAAoF,EAAOjF,aAAP,eAAcyB,UAAWiB,EAAQ7C,MAAOmE,MAAO,qBACjExD,KAAK,QACLuE,QAASA,EACTe,aAAa,KAGjB,yBAAK5C,UAAWC,KAAE4C,oBACb,UAAAd,EAAOjF,aAAP,eAAcyB,UAAWiB,EAAQ7C,OAGtC,kBAAC,EAAD,CAAQ2D,QAASP,EAAM5C,WAAYqD,MAAO,a,mBCEnDoD,GA7CC,SAAC7D,GAEOmC,aAAwC,SAAA9C,GAAK,OAAIA,EAAMD,WAA3E,IAEMzC,EAAWuF,cAUjB,OARA4B,qBAAU,WACNnH,EAASD,KACV,IAOC,oCACI,yBAAKuD,UAAWC,KAAE6D,aACd,yBAAK9D,UAAWC,KAAE8D,gBACd,yBAAK/D,UAAWC,KAAE+D,YAClB,yBAAKhE,UAAWC,KAAE+D,YAClB,yBAAKhE,UAAWC,KAAE+D,YAClB,yBAAKhE,UAAWC,KAAE+D,YAClB,yBAAKhE,UAAWC,KAAE+D,YAClB,yBAAKhE,UAAWC,KAAE+D,YAClB,yBAAKhE,UAAWC,KAAE+D,YAClB,yBAAKhE,UAAWC,KAAE+D,YAClB,yBAAKhE,UAAWC,KAAE+D,YAClB,yBAAKhE,UAAWC,KAAE+D,YAClB,yBAAKhE,UAAWC,KAAE+D,YAClB,yBAAKhE,UAAWC,KAAE+D,YAClB,yBAAKhE,UAAWC,KAAE+D,aAGtB,yBAAKhE,UAAWC,KAAEgE,kBACd,yBAAKjE,UAAWC,KAAEiE,cAAlB,YACA,oCACA,oCACA,qCACA,kBAAC,EAAD,CAAQ5D,QAASP,EAAM5C,WAAYqD,MAAO,e,oBChC/C2D,GAbE,SAACpE,GAEd,OACI,yBAAKC,UAAWC,KAAEmE,cACd,mCACA,6BACI,yCACA,4D,6BCyDDC,GA7DFlD,IAAMC,MAAM,WAAO,IAAD,EAECkD,oBAAS,GAFV,oBAEpBC,EAFoB,KAEZC,EAFY,KAGrB5G,EAASsE,aAAgC,SAAA9C,GAAK,OAAIA,EAAME,MAAM1B,UAC9DlB,EAAWuF,cAEjB4B,qBAAU,WACNnH,EfuEc,uCAAM,WAAOA,GAAP,iBAAA2F,EAAA,+EAEExF,IAFF,OAEdyF,EAFc,OAGpB5F,EAASwB,GAAa,IACtBxB,EAASmB,EAAQyE,EAAQjG,OAJL,gDAMdM,EAAQ,KAAE8F,SAAW,KAAEA,SAASpG,KAAKM,MAAS,KAAE4B,QAAU,gCAChEgE,QAAQC,IAAI,kBAAmB7F,GAPX,yDAAN,yDetEf,IAEH,IAGM8H,EAAsBrC,uBAAY,WAChCmC,GAAQC,GAAU,GACjBD,GAAQC,GAAU,KACzB,CAACD,IASH,OAFAhC,QAAQC,IAAI,eAGR,yBAAKxC,UAAWC,KAAEyE,MAEd,4BAAQtE,QAASqE,GAAjB,QACCF,GAAU,yBAAKvE,UAAWC,KAAE0E,YACzB,kBAAC,IAAD,CAASjC,GAAG,WAAW1C,UAAWC,KAAEE,KAAMyE,gBAAiB3E,KAAE4E,YAA7D,mBACA,kBAAC,IAAD,CAASnC,GAAG,YAAY1C,UAAWC,KAAEE,KAAMyE,gBAAiB3E,KAAE4E,YAA9D,YACCjH,EACK,kBAAC,IAAD,CAASwC,QAvBZ,WACX1D,Ef0DqB,uCAAM,WAAOA,GAAP,eAAA2F,EAAA,6DAC/B3F,EAASwB,GAAa,IADS,kBAGrBrB,IAHqB,uDAKrBF,EAAQ,KAAE8F,SAAW,KAAEA,SAASpG,KAAKM,MAAS,KAAE4B,QAAU,gCAChEgE,QAAQC,IAAI,kBAAmB7F,GANJ,yDAAN,wDepCmB+F,GAAG,SAAS1C,UAAWC,KAAEE,KAAMyE,gBAAiB3E,KAAE4E,YAA5E,WAGA,kBAAC,IAAD,CAASnC,GAAG,SAAS1C,UAAWC,KAAEE,KAAMyE,gBAAiB3E,KAAE4E,YAA3D,SACN,kBAAC,IAAD,CAASnC,GAAG,WAAW1C,UAAWC,KAAEE,KAAMyE,gBAAiB3E,KAAE4E,YAA7D,gBCvBHzB,GAAS9B,OAAaC,MAAM,CACrCxE,SAAUuE,OAAaE,WAAWC,IAAI,KAwD3BqD,GApDe,SAAC/E,GAAoC,IAAD,IACxDP,EAAU0C,aAAgD,SAAA9C,GAAK,OAAIA,EAAMI,WACzE9C,EAAWuF,cAF6C,EAItBP,mBAAiC,CACrEC,SAAUC,uBAAYwB,MADnBvB,EAJuD,EAIvDA,QAASC,EAJ8C,EAI9CA,aAAcC,EAJgC,EAIhCA,OAW9B,OAAIvC,EAAQV,QACD,kBAAC,IAAD,CAAU4D,GAAI,WAIrB,yBAAK1C,UAAWC,KAAEqD,aACd,yBAAKtD,UAAWC,KAAEsD,cACd,6DAEA,0BAAMpB,SAAUL,GAhBX,SAACzF,GZ+BU,IAACU,EY9BrBV,EAAKU,WAAaV,EAAKuC,gBACvBlC,GZ6BqBK,EY7BKV,EZ6BiC,SAACK,GACpEA,EAASS,GAAW,IACpBT,EAASsC,GAAkB,IAC3BR,EAA0BzB,GACrBR,MAAK,SAAAC,GACiB,MAAfA,EAAIgH,SACJ9G,EAASS,GAAW,IACpBY,EAAS,MACTrB,EAASsC,GAAkB,QAGlCyE,OAAM,SAAAC,GACHhH,EAASS,GAAW,IACpBT,EAASqB,EAAS2F,EAAEjB,SAASpG,KAAKM,cYzC/BD,EAASqB,EAAS,oCAcb,kBAAC,cAAD,CACI4E,GAAI,kBAAC,EAAD,CAAOhG,MAAO6C,EAAQ7C,MACfC,KAAM,WACNkE,MAAO,aAClBxD,KAAK,WACLuE,QAASA,EACTe,aAAa,KAEjB,kBAAC,cAAD,CACID,GAAI,kBAAC,EAAD,CAAOhG,OAAO,UAAAoF,EAAOhF,gBAAP,eAAiBwB,UAAWiB,EAAQ7C,MAC3CC,KAAM,WACNkE,MAAO,oBAClBxD,KAAK,kBACLuE,QAASA,EACTe,aAAa,KAEjB,yBAAK5C,UAAWC,KAAE4C,oBACb,UAAAd,EAAOhF,gBAAP,eAAiBwB,UAAWiB,EAAQ7C,OAEzC,kBAAC,EAAD,CAAQ2D,QAASP,EAAM5C,WAAYqD,MAAO,a,oBCvD/CuE,GARG,SAAChF,GACf,OACI,yBAAKC,UAAWC,KAAE+E,mBACd,yBAAKhF,UAAWC,KAAEgF,2B,oBCYjB7B,GAAS9B,OAAaC,MAAM,CACrCxE,SAAUuE,OAAaE,WAAWC,IAAI,GACtC3E,MAAOwE,OAAaE,WAAW1E,QAC/BoI,iBAAkB5D,OAAaE,WAAWC,IAAI,KA+FnC0D,GA5FEhE,IAAMC,MAAK,SAACrB,GAA8B,IAAD,YAEhDrD,EAAWuF,cAEXmD,EAAclD,aAAyC,SAAA9C,GAAK,OAAIA,EAAMG,YAJtB,EAQgBmC,mBAClE,CACIC,SAAUC,uBAAYwB,MAFvBtB,EAR+C,EAQ/CA,aAAcC,EARiC,EAQjCA,OAAQC,EARyB,EAQzBA,MAAOjE,EARkB,EAQlBA,SAAU8D,EARQ,EAQRA,QARQ,EAQCwD,YA4BvD,OACI,oCACKD,EAAY/I,KAAKS,MAAMwI,OAAS,GAAK,kBAAC,IAAD,CAAU5C,GAAI,WACpD,yBAAK1C,UAAWC,KAAEsF,aAAcC,OAVzB,WACX9I,EAAS4B,EAAkB,OAUnB,yBAAK0B,UAAWC,KAAEwF,aACd,wCACA,0BAAMtD,SAAUL,GA5Bf,SAACzF,GACd,GAAIA,EAAK6I,mBAAqB7I,EAAKU,SAAU,CACzC,IAAI2I,EAAU,CACV5I,MAAOT,EAAKS,MACZC,SAAUV,EAAKU,UAEnBL,EhBJkB,SAACL,GAC3B,OAAO,SAACK,GACJA,EAASS,GAAW,IACpBgB,EAAyB9B,GACpBE,MAAK,SAAAC,GACGA,EAAIH,KAAKM,MAGVD,EAAS4B,EAAkB9B,EAAIH,KAAKM,QAFpCD,EAba,SAACL,GAC9B,MAAO,CAACO,KAAM,6BAA8BP,QAYnBsJ,CAAkBnJ,EAAIH,KAAKuJ,YAIxClJ,EAASS,GAAW,OAEvBsG,OAAM,SAAAC,GACCnB,QAAQC,IAAIkB,EAAEjB,SAASpG,KAAKM,OAC5BD,EAAS4B,EAAkBoF,EAAEjB,SAASpG,KAAKM,QAC3CD,EAASS,GAAW,QgBXnB0I,CAAeH,IACxBnD,QAAQC,IAAIkD,GACZ1D,SAEAjE,EAAS,WAAY,CAACQ,QAAS,6GAC/BR,EAAS,mBAAoB,CAACQ,QAAS,iHAmB3B,kBAAC,cAAD,CACIoE,GAAI,kBAAC,EAAD,CAAO/B,SAAU,wBAAgC,QAA1B,UAAAmB,EAAOjF,aAAP,eAAcyB,UAC9B5B,OAAO,UAAAoF,EAAOjF,aAAP,eAAcyB,UAAW6G,EAAY/G,aAC5CzB,KAAM,OACNkE,MAAO,qBAClBxD,KAAK,QACLuE,QAASA,EACTe,aAAa,KAEjB,yBAAK5C,UAAWC,KAAE4C,oBACb,UAAAd,EAAOjF,aAAP,eAAcyB,UAAW6G,EAAY/G,cAG1C,kBAAC,cAAD,CACIsE,GAAI,kBAAC,EAAD,CACAhG,MAAK,UAAEoF,EAAOhF,gBAAT,aAAE,EAAiBwB,QACxB3B,KAAM,WACNkE,MAAO,aACXxD,KAAK,WACLuE,QAASA,EACTe,aAAa,KAEjB,yBAAK5C,UAAWC,KAAE4C,mBAAlB,UACKd,EAAOhF,gBADZ,aACK,EAAiBwB,SAGtB,kBAAC,cAAD,CACIoE,GAAI,kBAAC,EAAD,CAAO/B,SAAU,wBAA2C,QAArC,UAAAmB,EAAOmD,wBAAP,eAAyB3G,UACzC5B,MAAK,UAAEoF,EAAOmD,wBAAT,aAAE,EAAyB3G,QAChC3B,KAAM,WACNkE,MAAO,qBAClBxD,KAAK,mBACLuE,QAASA,EACTe,aAAa,KAEjB,yBAAK5C,UAAWC,KAAE4C,mBAAlB,UACKd,EAAOmD,wBADZ,aACK,EAAyB3G,SAG9B,kBAAC,EAAD,CAAQiC,MAAO,OACPF,QAASP,EAAM5C,oBCzEhC2I,GAxBH,WAER,IAAM3I,EAAa+E,aAAgC,SAAA9C,GAAK,OAAIA,EAAMjC,WAAWA,cAG7E,OACI,kBAAC,IAAD,KACI,yBAAK6C,UAAU,OACV7C,GAAc,kBAAC,GAAD,MACf,kBAAC,GAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO4I,KAAK,WAAWC,OAAQ,kBAAO,kBAAC,GAAD,CAAS7I,WAAYA,OAC3D,kBAAC,IAAD,CAAO8I,OAAK,EAACF,KAAK,YAAYC,OAAQ,kBAAO,kBAAC,GAAD,CAAU7I,WAAYA,OACnE,kBAAC,IAAD,CAAO8I,OAAK,EAACF,KAAM,CAAC,SAAU,KAAMC,OAAQ,kBAAO,kBAAC,GAAD,CAAO7I,WAAYA,OACtE,kBAAC,IAAD,CAAO8I,OAAK,EAACF,KAAK,WAAWC,OAAQ,kBAAO,kBAAC,GAAD,CAAS7I,WAAYA,OACjE,kBAAC,IAAD,CAAO4I,KAAK,kBAAkBC,OAAQ,kBAAO,kBAAC,GAAD,CAAuB7I,WAAYA,OAChF,kBAAC,IAAD,CAAO6I,OAAQ,kBAAO,kBAAC,GAAD,aCvB1CE,IAASF,OACL,kBAAC,IAAMG,WAAP,KACI,kBAAC,IAAD,CAAUzG,MAAOA,GACb,kBAAC,GAAD,QAIN0G,SAASC,eAAe,SzB4HxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjK,MAAK,SAAAkK,GACJA,EAAaC,gBAEdjD,OAAM,SAAA9G,GACL4F,QAAQ5F,MAAMA,EAAM4B,a,mB0BhJ5BoI,EAAOC,QAAU,CAAC,KAAO,mBAAmB,WAAa,yBAAyB,KAAO,mBAAmB,WAAa,2B,mBCAzHD,EAAOC,QAAU,CAAC,KAAO,oBAAoB,UAAY,yBAAyB,mBAAqB,kCAAkC,WAAa,0BAA0B,MAAQ,qBAAqB,MAAQ,qBAAqB,KAAO,sB,mBCAjPD,EAAOC,QAAU,CAAC,KAAO,sBAAsB,YAAc,6BAA6B,aAAe,gC,mBCAzGD,EAAOC,QAAU,CAAC,KAAO,uBAAuB,aAAe,+BAA+B,YAAc,gC,mBCA5GD,EAAOC,QAAU,CAAC,KAAO,qBAAqB,OAAS,uBAAuB,gBAAkB,gCAAgC,KAAO,qBAAqB,aAAa,2BAA2B,aAAa,2BAA2B,aAAa,2BAA2B,aAAa,6B,mBCAjSD,EAAOC,QAAU,CAAC,KAAO,oBAAoB,UAAY,yBAAyB,MAAQ,qBAAqB,MAAQ,uB,mBCAvHD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,kBAAoB,qCAAqC,uBAAyB,0CAA0C,eAAe,kC,mBCA5LD,EAAOC,QAAU,CAAC,KAAO,yB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,uBAAuB,aAAe,iC,4ECA/DD,EAAOC,QAAU,CAAC,KAAO,sBAAsB,YAAc,6BAA6B,iBAAmB,kCAAkC,aAAe,8BAA8B,eAAiB,gCAAgC,UAAY,6B","file":"static/js/main.3d6e3b7a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\nimport { ProfileDataType } from \"../store/ProfileReducer\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials:true,\r\n    baseURL:\"http://localhost:7542/2.0/\"\r\n})\r\n\r\nexport const ProfileAPI = {\r\n    GetProfile:(data: {})=>{\r\n        return instance.post<ProfileDataType>('auth/me', data).then(res=>\r\n            res.data\r\n        )\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {ProfileAPI} from \"../api/ProfileAPI\";\r\n\r\nexport type ActionsType=\r\n    SetProfileUserDataAcType\r\n\r\n\r\nexport type ProfileDataType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n    created: string;\r\n    updated: string;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n    error: string;\r\n} | null\r\n\r\nlet ProfileInitialState:ProfileDataType = null\r\n\r\nexport const ProfileReducer = (state = ProfileInitialState, action: ActionsType) => {\r\n switch (action.type) {\r\n     case \"PROFILE/SET-PROFILE-USER-DATA\":{\r\n        return {\r\n            ...action.data\r\n        }\r\n     }\r\n         default:return state\r\n }\r\n}\r\n\r\nexport const SetProfileUserDataAC =(data:ProfileDataType)=> {\r\n    return{\r\n        type:\"PROFILE/SET-PROFILE-USER-DATA\", data\r\n    } as const\r\n}\r\n\r\nexport const GetProfileDataTC = ()=>{\r\n    return (dispatch:Dispatch) =>{\r\n        ProfileAPI.GetProfile({}).then(res=>{\r\n            if (res?.error){\r\n                dispatch(SetProfileUserDataAC(res))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\ntype SetProfileUserDataAcType = ReturnType<typeof SetProfileUserDataAC>\r\n\r\n","import axios from 'axios'\r\n\r\ntype LogOutResponse = {\r\n    info: string\r\n    error: string\r\n}\r\nexport type ResponseServerType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number // количество колод\r\n    created: string      //Date\r\n    updated: string    //Date\r\n    isAdmin: boolean\r\n    verified: boolean // подтвердил ли почту\r\n    rememberMe: boolean\r\n    error: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"http://localhost:7542/2.0/\"\r\n})\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post<ResponseServerType>('auth/login', {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete<LogOutResponse>('auth/me')\r\n    },\r\n    authMe() {\r\n        return instance.post<ResponseServerType>('auth/me')\r\n    }\r\n}","export type InitIsFetchingReducerState = {\r\n    isFetching: boolean\r\n\r\n}\r\n\r\nconst initialState: InitIsFetchingReducerState = {\r\n    isFetching: false,\r\n}\r\n\r\nexport const IsFetchingReducer = (state: InitIsFetchingReducerState = initialState, action: ActionTypes): InitIsFetchingReducerState => {\r\n    switch (action.type) {\r\n        case \"login/SET_FETCHING\":\r\n            return {...state, isFetching: action.isFetch}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// AC\r\nexport const isFetching = (isFetch: boolean) => ({type: 'login/SET_FETCHING', isFetch} as const)\r\n\r\nexport type IsFetch = ReturnType<typeof isFetching>\r\n\r\ntype ActionTypes = IsFetch","import {Dispatch} from \"redux\";\r\nimport {authAPI, ResponseServerType} from \"../api/authAPI\";\r\nimport {IsFetch, isFetching} from \"./isFetchingReducer\";\r\n\r\nexport type InitialLoginReducerState = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number // количество колод\r\n    created: string // Date\r\n    updated: string // Date\r\n    isAdmin: boolean\r\n    verified: boolean // подтвердил ли почту\r\n    rememberMe: boolean\r\n    token?: string,\r\n    tokenDeathTime?: number\r\n    error: string,\r\n    errorIn?: ErrorInType\r\n    authMe: boolean\r\n}\r\n\r\n\r\nconst initialState: InitialLoginReducerState = {\r\n    _id: '',\r\n    email: '',\r\n    name: '',\r\n    rememberMe: false,\r\n    error: '',\r\n    verified: false,\r\n    publicCardPacksCount: 0,\r\n    isAdmin: false,\r\n    created: '',\r\n    updated: '',\r\n    authMe: false\r\n}\r\n\r\nexport const LoginReducer = (state: InitialLoginReducerState = initialState, action: ActionType): InitialLoginReducerState => {\r\n    switch (action.type) {\r\n        case \"login/SET_USER\":\r\n            return {...state, ...action.user}\r\n        case \"login/SET_ERROR\":\r\n            return {...state, error: action.error}\r\n        case \"login/SET_ERROR_IN\":\r\n            return {...state, errorIn: action.errorIn}\r\n        case \"login/AUTH_ME\":\r\n            return {...state, authMe: action.authMe}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//thunk\r\nexport const setLogin = (email: string, password: string, rememberMe: boolean) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(isFetching(true))\r\n        const promise = await authAPI.login(email, password, rememberMe)\r\n        dispatch(authMeAction(true))\r\n        dispatch(setUser(promise.data))\r\n        console.log(\"Response(login): \", promise)\r\n    } catch (e) {\r\n        if (e.response) {\r\n            console.log('ERROR(login): ', e.response.data.error)\r\n            if (e.response.data.password) {                   // если валидацию не прошел пароль\r\n                dispatch(setErrorInPass(\"password\"))  // диспатч \"password\", чтобы отобразить ошибку в пароле\r\n            } else if (e.response.data.email) {             // если валидацию не прошел логин (email)\r\n                dispatch(setErrorInPass(\"email\"))   // диспатч \"email\", чтобы отобразить ошибку в логине\r\n            }\r\n            dispatch(setError(e.response.data.error))\r\n        } else {\r\n            console.log('ERROR: ', e.message + ', more details in the console')\r\n        }\r\n    }\r\n    dispatch(isFetching(false))\r\n}\r\nexport const setLogOutUser = () => async (dispatch: Dispatch) => {\r\n    dispatch(authMeAction(false))\r\n    try {\r\n        await authAPI.logout()\r\n    } catch (e) {\r\n        const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n        console.log('Log out error: ', error)\r\n    }\r\n}\r\nexport const AuthMe = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        const promise = await authAPI.authMe()\r\n        dispatch(authMeAction(true))\r\n        dispatch(setUser(promise.data))\r\n    } catch (e) {\r\n        const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n        console.log('Authorization: ', error)\r\n    }\r\n}\r\n\r\nexport type ErrorInType = 'password' | 'email'\r\n//AC\r\nexport const setUser = (user: ResponseServerType) => ({type: 'login/SET_USER', user} as const)\r\nexport const setError = (error: string) => ({type: 'login/SET_ERROR', error} as const)\r\nexport const setErrorInPass = (errorIn: ErrorInType) => ({type: 'login/SET_ERROR_IN', errorIn} as const)\r\nexport const authMeAction = (authMe: boolean) => ({type: 'login/AUTH_ME', authMe} as const)\r\n\r\nexport type SetUserType = ReturnType<typeof setUser>\r\nexport type SetError = ReturnType<typeof setError>\r\nexport type ErrorPass = ReturnType<typeof setErrorInPass>\r\nexport type authMeAction = ReturnType<typeof authMeAction>\r\n\r\ntype ActionType = SetUserType | SetError | IsFetch | ErrorPass  | authMeAction","import axios from 'axios'\r\nimport { RegisterUserDataType} from \"../store/RegisterReducer\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials:true,\r\n    baseURL:\"http://localhost:7542/2.0/\"\r\n})\r\n\r\ntype RegisterResponseType={\r\n    addedUser:RegisterUserDataType\r\n    error:string\r\n}\r\n\r\nexport type PostType = {\r\n    email:string\r\n    password:string\r\n}\r\n\r\nexport const RegisterAPI = {\r\n    RegisterUser:(data:PostType)=>{\r\n        return instance.post<RegisterResponseType>('auth/register/', data)}\r\n}","import {Dispatch} from \"redux\";\r\nimport {RegisterAPI, PostType} from \"../api/registerAPI\";\r\nimport {IsFetch, isFetching} from \"./isFetchingReducer\";\r\n\r\nexport type ActionsType =\r\n    SetRegisterDataAcType\r\n    | SetErrorMessageAcType\r\n    | IsFetch\r\n\r\nexport type RegisterUserDataType = {\r\n    email: string\r\n    id: string\r\n}\r\n\r\nlet initialState = {\r\n    data: {\r\n        email: '',\r\n        id: '',\r\n    },\r\n    errorMessage: '',\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nexport const RegisterReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"REGISTER/SET-REGISTER-DATA\": {\r\n            return {...state, ...state.data, data: action.data}\r\n        }\r\n        case \"REGISTER/SET-ERROR-MESSAGE-TYPE\": {\r\n            return { ...state, errorMessage: action.message}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const SetRegisterDataAC = (data: RegisterUserDataType) => {\r\n    return {type: \"REGISTER/SET-REGISTER-DATA\", data} as const\r\n}\r\nexport const SetErrorMessageAC = (message: string) => {\r\n    return {type: \"REGISTER/SET-ERROR-MESSAGE-TYPE\", message} as const\r\n}\r\n\r\nexport const RegisterUserTC = (data: PostType) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(isFetching(true))\r\n        RegisterAPI.RegisterUser(data)\r\n            .then(res => {\r\n                if (!res.data.error) {\r\n                    dispatch(SetRegisterDataAC(res.data.addedUser))\r\n                } else {\r\n                    dispatch(SetErrorMessageAC(res.data.error))\r\n                }\r\n                dispatch(isFetching(false))\r\n            })\r\n            .catch(e => {\r\n                    console.log(e.response.data.error)\r\n                    dispatch(SetErrorMessageAC(e.response.data.error))\r\n                    dispatch(isFetching(false))\r\n                }\r\n            )\r\n\r\n    }\r\n}\r\n\r\ntype SetRegisterDataAcType = ReturnType<typeof SetRegisterDataAC>\r\ntype SetErrorMessageAcType = ReturnType<typeof SetErrorMessageAC>\r\n\r\n","import axios from 'axios'\r\nimport {RegisterUserDataType} from \"../store/RegisterReducer\";\r\nimport {RestoreFormInput} from \"../main/authGroup/RestorePage/Restore\";\r\nimport {ChangePasswordFormInput} from \"../main/authGroup/RestorePage/RestoreChangePassword\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"http://localhost:7542/2.0/\"\r\n    // baseURL: \"https://neko-back.herokuapp.com/2.0\"\r\n})\r\ntype RestoreResponseType = {\r\n    answer: boolean,\r\n    html: boolean,\r\n    info: string\r\n    success: boolean\r\n}\r\ntype ChangePasswordResponseType = {\r\n    info: string\r\n}\r\n\r\nexport type PostType = {\r\n    email: string\r\n    password: string\r\n}\r\n\r\n\r\nexport const RestoreApi = {\r\n    restore(data: RestoreFormInput) {\r\n        const email = data.email\r\n        return instance.post<RestoreResponseType>('auth/forgot', {\r\n            email,\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\r\n                          password recovery link: \r\n                          <a href='http://localhost:3000/neko-card-react-ts-project#/changePassword/$token$'>link</a>\r\n                      </div> `\r\n        })\r\n    },\r\n    changePassword(data: ChangePasswordFormInput) {\r\n        const passwordToken = window.location.href.split('/')[5]\r\n        const password = data.repeat_password\r\n        return instance.post<ChangePasswordResponseType>('auth/set-new-password', {password: password, resetPasswordToken: passwordToken})\r\n    }\r\n}","import {RestoreFormInput} from \"../main/authGroup/RestorePage/Restore\"\r\nimport {Dispatch} from \"redux\";\r\nimport {ChangePasswordFormInput} from \"../main/authGroup/RestorePage/RestoreChangePassword\";\r\nimport {RestoreApi} from \"../api/restoreAPI\";\r\nimport {IsFetch, isFetching} from \"./isFetchingReducer\";\r\n\r\nexport type ActionsType = SetLoadingType | IsFetch | SetSuccessRequest\r\n\r\nexport type InitialRestoreStateType = {\r\n    error: string | null\r\n    success: boolean\r\n    disableButton: boolean\r\n}\r\n\r\nlet initialState: InitialRestoreStateType = {\r\n    error: null,\r\n    success: false,\r\n    disableButton: false\r\n}\r\n\r\nexport const RestoreReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'RESTORE/SET_ERROR':\r\n            return {...state, error: action.error}\r\n        case 'RESTORE/SET_SUCCESS_REQUEST':\r\n            return {...state, success: action.success}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setError = (error: string | null) => ({\r\n    type: 'RESTORE/SET_ERROR', error\r\n} as const)\r\nexport const setSuccessRequest = (success: boolean) => ({\r\n    type: 'RESTORE/SET_SUCCESS_REQUEST', success\r\n} as const)\r\n\r\n//types\r\nexport type SetLoadingType = ReturnType<typeof setError>\r\nexport type SetSuccessRequest = ReturnType<typeof setSuccessRequest>\r\n\r\n\r\n\r\n//thunk\r\nexport const RestoreTC = (data: RestoreFormInput) => (dispatch: Dispatch) => {\r\n    dispatch(isFetching(true))\r\n    dispatch(setSuccessRequest(false))\r\n\r\n    RestoreApi.restore(data)\r\n        .then(res => {\r\n                if (res.status === 200) {\r\n                    dispatch(isFetching(true))\r\n                    dispatch(setError(null))\r\n                    dispatch(setSuccessRequest(true))\r\n                }\r\n            }\r\n        )\r\n        .catch(e => {\r\n            dispatch(isFetching(false))\r\n            dispatch(setError(e.response.data.error))\r\n        })\r\n\r\n}\r\n\r\nexport const ChangePasswordTC = (password: ChangePasswordFormInput) => (dispatch: Dispatch) => {\r\n    dispatch(isFetching(true))\r\n    dispatch(setSuccessRequest(false))\r\n    RestoreApi.changePassword(password)\r\n        .then(res => {\r\n            if (res.status === 200) {\r\n                dispatch(isFetching(true))\r\n                setError(null)\r\n                dispatch(setSuccessRequest(true))\r\n            }\r\n        })\r\n        .catch(e => {\r\n            dispatch(isFetching(false))\r\n            dispatch(setError(e.response.data.error))\r\n        })\r\n}\r\n","export type ActionsType={\r\n\r\n}\r\n\r\nlet initialState = {\r\n\r\n}\r\n\r\nexport const ChangePasswordReducer = (state = initialState, action: ActionsType) => {\r\n    return state\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {ProfileReducer} from \"./ProfileReducer\";\r\nimport {LoginReducer} from \"./LoginReducer\";\r\nimport {RegisterReducer} from \"./RegisterReducer\";\r\nimport {RestoreReducer} from \"./RestoreReducer\";\r\nimport {ChangePasswordReducer} from \"./ChangePasswordReducer\";\r\nimport thunkMiddleWare from \"redux-thunk\"\r\nimport {IsFetchingReducer} from \"./isFetchingReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profile: ProfileReducer,\r\n    login: LoginReducer,\r\n    register: RegisterReducer,\r\n    restore: RestoreReducer,\r\n    changePassword: ChangePasswordReducer,\r\n    isFetching: IsFetchingReducer,\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleWare))\r\n\r\nexport type StateType = ReturnType<typeof reducers>\r\n\r\nexport default store\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport s from './Button.module.scss'\r\n\r\ntype ButtonType = {\r\n    title?: string\r\n    onClick?: () => void\r\n    disable?: boolean\r\n}\r\n\r\nconst Button = (props: ButtonType) => {\r\n    return (\r\n        <div className={s.loginButtonBody}>\r\n            <span className={s.link}>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                <button onClick={props.onClick} disabled={props.disable} className={s.button}>\r\n                    {props.title}\r\n                </button>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button","import React, {ChangeEvent} from \"react\";\r\nimport s from './Input.module.scss'\r\nimport {RefType} from \"../Checkbox/Checkbox\";\r\n\r\ntype InputType = {\r\n    label?: string\r\n    type?: string\r\n    value?: string\r\n    onChange?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    error?: string | null\r\n    register?: RefType\r\n    name?: string\r\n    disable?: boolean\r\n}\r\n\r\nconst Input = (props: InputType) => {\r\n    return (\r\n        <div className={props.error ? s.error : s.inputBody}>\r\n            <input value={props.value}\r\n                   type={props.type}\r\n                   onChange={props.onChange}\r\n                   ref={props.register}\r\n                   name={props.name}\r\n                   disabled={props.disable}\r\n            />\r\n\r\n            {!props.value ? <label>{props.label}</label> : ''}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input","import React, {ChangeEvent, RefObject} from 'react';\r\nimport s from './Checkbox.module.scss'\r\n\r\nexport type RefType = string | ((instance: HTMLInputElement | null) => void) | RefObject<HTMLInputElement> | null | undefined\r\ntype CheckboxType = {\r\n    checked?: boolean\r\n    onChange?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    name?: string\r\n    register?:  RefType\r\n    disable?: boolean\r\n}\r\n\r\nconst Checkbox = (props: CheckboxType) => {\r\n    return (\r\n        <div >\r\n            <input  checked={props.checked}\r\n                    onChange={props.onChange}\r\n                    className={s.checkbox}\r\n                    type={'checkbox'}\r\n                    name={props.name}\r\n                    ref={props.register}\r\n                    disabled={props.disable}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Checkbox","import React, {useCallback} from 'react';\r\nimport Button from \"../../../Components/Button/Button\";\r\nimport Input from \"../../../Components/Input/Input\";\r\nimport Checkbox from \"../../../Components/Checkbox/Checkbox\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StateType} from \"../../../store/redux-store\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {ErrorInType, setLogin} from \"../../../store/LoginReducer\";\r\nimport * as yup from \"yup\";\r\nimport {yupResolver} from '@hookform/resolvers/yup';\r\nimport s from './Login.module.scss'\r\nimport {Redirect} from 'react-router-dom';\r\n\r\ntype LoginFormType = {\r\n    className?: string\r\n    isFetching: boolean\r\n}\r\ntype FormType = {\r\n    'login': string\r\n    'password': string\r\n    'rememberMe': boolean\r\n}\r\n\r\n\r\nconst LoginForm = React.memo((props: LoginFormType) => {\r\n\r\n    const schemaLogin = yup.object().shape({\r\n        login: yup.string().required().email(),\r\n        password: yup.string().required().min(7)\r\n    })\r\n\r\n    const {register, control, handleSubmit, errors, reset} = useForm<FormType>({\r\n        resolver: yupResolver(schemaLogin)\r\n    })\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const authMe = useSelector<StateType, boolean>(state => state.login.authMe)\r\n    const error = useSelector<StateType, string>(state => state.login.error)\r\n    const errorIn = useSelector<StateType, ErrorInType | undefined>(state => state.login.errorIn)\r\n\r\n\r\n    const onSubmit = useCallback(function (data: FormType) {\r\n        dispatch(setLogin(data.login, data.password, data.rememberMe))\r\n        reset()\r\n    }, [authMe])\r\n\r\n    console.log(authMe)\r\n    if (authMe) return <Redirect to={'/profile'}/>\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Controller\r\n                    as={<Input onChange={() => errors.login?.message === null}\r\n                               disable={props.isFetching}\r\n                               error={errors.login?.message || error}\r\n                               label={'login'}/>}\r\n                    name=\"login\"\r\n                    control={control}\r\n                    defaultValue=\"\"\r\n                />\r\n\r\n                <div className={s.errorMessageColor}>\r\n                    {errors.login && <span>{errors.login.message}</span>}\r\n                    {errorIn === \"email\" && <span>{error}</span>}\r\n                </div>\r\n\r\n                <Controller\r\n                    as={<Input onChange={() => errors.login?.message === null}\r\n                               disable={props.isFetching}\r\n                               type={'password'}\r\n                               error={errors.password?.message || error}\r\n                               label={'password'}/>}\r\n                    name=\"password\"\r\n                    control={control}\r\n                    defaultValue=\"\"\r\n                />\r\n                <div className={s.errorMessageColor}>\r\n                    {errors.password && <span>{errors.password.message}</span>}\r\n                    {errorIn === \"password\" && <span>{error}</span>}\r\n                </div>\r\n\r\n                <Checkbox name={'rememberMe'} register={register} disable={props.isFetching}/>\r\n                <Button title={'login'} disable={props.isFetching}/>\r\n            </form>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default LoginForm","import React from 'react';\r\nimport s from './Login.module.scss'\r\nimport {NavLink} from 'react-router-dom';\r\nimport LoginForm from \"./LoginForm\";\r\n\r\ntype LoginType = {\r\n    isFetching: boolean\r\n}\r\n\r\nconst Login = (props: LoginType) => {\r\n\r\n    return (\r\n        <div className={s.loginPage}>\r\n            <div className={s.loginFormContainer} >\r\n                <h1> LOGIN </h1>\r\n                <LoginForm isFetching={props.isFetching} className={s.loginFormContainer} />\r\n                <div className={s.items}>\r\n                    <NavLink className={s.text1} to='/restore'>Forgot your password?</NavLink>\r\n                    <NavLink className={s.text} to='/register'>Register</NavLink>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","import React from 'react';\r\nimport s from './Restore.module.scss'\r\nimport Input from \"../../../Components/Input/Input\";\r\nimport Button from \"../../../Components/Button/Button\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {InitialRestoreStateType, RestoreTC} from '../../../store/RestoreReducer';\r\nimport {StateType} from \"../../../store/redux-store\";\r\nimport * as yup from \"yup\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\n\r\ntype RestoreProps = {\r\n    isFetching: boolean\r\n}\r\n\r\nexport type RestoreFormInput = {\r\n    email: string;\r\n}\r\n\r\nexport const schema = yup.object().shape({\r\n    email: yup.string().required().email(),\r\n});\r\n\r\nconst Restore = (props: RestoreProps) => {\r\n    const dispatch = useDispatch()\r\n    const restore = useSelector<StateType, InitialRestoreStateType>(state => state.restore)\r\n\r\n    const {control, handleSubmit, errors} = useForm<RestoreFormInput>({\r\n        resolver: yupResolver(schema)\r\n    });\r\n\r\n    const onSubmit = (data: RestoreFormInput) => {\r\n        dispatch(RestoreTC(data))\r\n    };\r\n\r\n    return (\r\n        <div className={s.restorePage}>\r\n            <div className={s.restoreBlock}>\r\n                <h1>Forgot you password?</h1>\r\n                {restore.success\r\n                    ? <h2>Link on email</h2>\r\n                    : <form onSubmit={handleSubmit(onSubmit)}>\r\n                        <Controller\r\n                            as={<Input onChange={() => errors.email?.message === null}\r\n                                       error={errors.email?.message || restore.error} label={'Enter your login'}/>}\r\n                            name=\"email\"\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                        />\r\n\r\n                        <div className={s.errorMessageColor}>\r\n                            {errors.email?.message || restore.error}\r\n                        </div>\r\n\r\n                        <Button disable={props.isFetching} title={'SEND'}/>\r\n                    </form>\r\n                }\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Restore","import React, {useEffect} from 'react';\r\nimport s from './Profile.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {GetProfileDataTC, ProfileDataType} from \"../../store/ProfileReducer\";\r\nimport {StateType} from \"../../store/redux-store\";\r\nimport Button from \"../../Components/Button/Button\";\r\n\r\ntype ProfileType = {\r\n    isFetching: boolean\r\n}\r\n\r\nconst Profile = (props: ProfileType) => {\r\n\r\n    const profileData = useSelector<StateType, ProfileDataType>(state => state.profile)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(GetProfileDataTC)\r\n    }, [])\r\n\r\n  /*  if (!profileData?._id) return <Redirect to={'/login'}/>\r\n*/\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.profilePage}>\r\n                <div className={s.profileContent}>\r\n                    <div className={s.cardField}></div>\r\n                    <div className={s.cardField}></div>\r\n                    <div className={s.cardField}></div>\r\n                    <div className={s.cardField}></div>\r\n                    <div className={s.cardField}></div>\r\n                    <div className={s.cardField}></div>\r\n                    <div className={s.cardField}></div>\r\n                    <div className={s.cardField}></div>\r\n                    <div className={s.cardField}></div>\r\n                    <div className={s.cardField}></div>\r\n                    <div className={s.cardField}></div>\r\n                    <div className={s.cardField}></div>\r\n                    <div className={s.cardField}></div>\r\n                </div>\r\n\r\n                <div className={s.profileContainer}>\r\n                    <div className={s.titleProfile}>Profile </div>\r\n                    <div>Ava</div>\r\n                    <div>Ava</div>\r\n                    <div>name</div>\r\n                    <Button disable={props.isFetching} title={'LogOut'} />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react';\r\nimport s from './NotFound.module.scss'\r\n\r\n\r\nconst NotFound = (props: any) => {\r\n\r\n    return (\r\n        <div className={s.notFoundPage}>\r\n            <h1>404</h1>\r\n            <div>\r\n                <h1>not found</h1>\r\n                <div>тест</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound","import React, {useCallback, useEffect, useState} from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from './Menu.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AuthMe, setLogOutUser} from \"../../store/LoginReducer\";\r\nimport {StateType} from \"../../store/redux-store\";\r\n\r\nconst Menu = React.memo (() => {\r\n\r\n    const [isHide, setIsHide] = useState(true)\r\n    const authMe = useSelector<StateType, boolean>(state => state.login.authMe)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(AuthMe())\r\n    }, [])\r\n\r\n    const logOut = () => {\r\n        dispatch(setLogOutUser())\r\n    }\r\n    const showHideMenuTrigger = useCallback(() => {\r\n        if (isHide) setIsHide(false)\r\n        if (!isHide) setIsHide(true)\r\n    },[isHide])\r\n    // const hideMenu = () => {\r\n    //     setIsHide(true)\r\n    // }\r\n    // const showMenu = () => {\r\n    //     setIsHide(false)\r\n    // }\r\n    console.log('Menu render')\r\n\r\n    return (\r\n        <div className={s.menu}>\r\n\r\n            <button onClick={showHideMenuTrigger}>menu</button>\r\n            {isHide && <div className={s.menuActive}>\r\n                <NavLink to='/restore' className={s.link} activeClassName={s.activeLink}>Forgot password</NavLink>\r\n                <NavLink to='/register' className={s.link} activeClassName={s.activeLink}>Register</NavLink>\r\n                {authMe\r\n                    ? <NavLink onClick={logOut} to='/login' className={s.link} activeClassName={s.activeLink}>\r\n                        Log out\r\n                    </NavLink>\r\n                    : <NavLink to='/login' className={s.link} activeClassName={s.activeLink}>Login</NavLink>}\r\n                <NavLink to='/profile' className={s.link} activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>}\r\n\r\n            {/*{isHide*/}\r\n            {/*    ? <button onClick={showMenu}>menu</button>*/}\r\n            {/*    : <div className={s.menuActive}>*/}\r\n            {/*        <button onClick={hideMenu}>menu</button>*/}\r\n            {/*        <NavLink to='/restore' className={s.link} activeClassName={s.activeLink}>Forgot password</NavLink>*/}\r\n            {/*        <NavLink to='/register' className={s.link} activeClassName={s.activeLink}>Register</NavLink>*/}\r\n            {/*        {*/}\r\n            {/*            authMe*/}\r\n            {/*                ? <NavLink onClick={logOut} to='/login' className={s.link} activeClassName={s.activeLink}>*/}\r\n            {/*                    Log out*/}\r\n            {/*                </NavLink>*/}\r\n            {/*                : <NavLink to='/login' className={s.link} activeClassName={s.activeLink}>Login</NavLink>*/}\r\n            {/*        }*/}\r\n            {/*        <NavLink to='/profile' className={s.link} activeClassName={s.activeLink}>Profile</NavLink>*/}\r\n            {/*    </div>*/}\r\n            {/*}*/}\r\n        </div>\r\n\r\n    )\r\n})\r\n\r\nexport default Menu","import React from 'react';\r\nimport s from './Restore.module.scss'\r\nimport Input from \"../../../Components/Input/Input\";\r\nimport Button from \"../../../Components/Button/Button\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ChangePasswordTC, InitialRestoreStateType, setError} from \"../../../store/RestoreReducer\";\r\nimport {StateType} from \"../../../store/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport * as yup from \"yup\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\n\r\ntype ChangePasswordPropsType = {\r\n    isFetching: boolean\r\n}\r\n\r\nexport type ChangePasswordFormInput = {\r\n    password: string,\r\n    repeat_password: string\r\n}\r\n\r\nexport const schema = yup.object().shape({\r\n    password: yup.string().required().min(7),\r\n});\r\n\r\n\r\nconst RestoreChangePassword = (props: ChangePasswordPropsType) => {\r\n    const restore = useSelector<StateType, InitialRestoreStateType>(state => state.restore)\r\n    const dispatch = useDispatch()\r\n\r\n    const {control, handleSubmit, errors} = useForm<ChangePasswordFormInput>({\r\n        resolver: yupResolver(schema)\r\n    });\r\n\r\n    const onSubmit = (data: ChangePasswordFormInput) => {\r\n        if (data.password === data.repeat_password) {\r\n            dispatch(ChangePasswordTC(data))\r\n        } else dispatch(setError('Password must be identical '))\r\n    };\r\n\r\n\r\n    if (restore.success) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.restorePage}>\r\n            <div className={s.restoreBlock}>\r\n                <h1>Please, set your new Password</h1>\r\n\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <Controller\r\n                        as={<Input error={restore.error}\r\n                                   type={'password'}\r\n                                   label={'password'}/>}\r\n                        name=\"password\"\r\n                        control={control}\r\n                        defaultValue=\"\"\r\n                    />\r\n                    <Controller\r\n                        as={<Input error={errors.password?.message || restore.error}\r\n                                   type={'password'}\r\n                                   label={'repeat password'}/>}\r\n                        name=\"repeat_password\"\r\n                        control={control}\r\n                        defaultValue=\"\"\r\n                    />\r\n                    <div className={s.errorMessageColor}>\r\n                        {errors.password?.message || restore.error}\r\n                    </div>\r\n                    <Button disable={props.isFetching} title={'SEND'}/>\r\n                </form>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RestoreChangePassword","import React from 'react';\r\nimport s from './Preloader.module.scss'\r\n\r\ntype PreloaderType = {\r\n\r\n}\r\n\r\nconst Preloader = (props: PreloaderType) => {\r\n    return (\r\n        <div className={s.cssload_container}>\r\n            <div className={s.cssload_speeding_wheel}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader","import React from 'react'\r\nimport * as yup from \"yup\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport s from \"./Register.module.scss\";\r\nimport Button from \"../../../Components/Button/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {initialStateType, RegisterUserTC, SetErrorMessageAC} from \"../../../store/RegisterReducer\";\r\nimport {StateType} from \"../../../store/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport Preloader from \"../../../Components/Preloader/Preloader\";\r\nimport Input from \"../../../Components/Input/Input\";\r\n\r\ntype RegisterPropsType = {\r\n    isFetching: boolean\r\n}\r\n\r\ntype FormsType = {\r\n    \"confirm_password\": string\r\n    \"password\": string\r\n    \"email\": string\r\n}\r\nexport const schema = yup.object().shape({\r\n    password: yup.string().required().min(7),\r\n    email: yup.string().required().email(),\r\n    confirm_password: yup.string().required().min(7)\r\n});\r\n\r\nconst Register = React.memo((props: RegisterPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const newUserData = useSelector<StateType, initialStateType>(state => state.register)\r\n\r\n\r\n\r\n    const {handleSubmit, errors, reset, setError, control, clearErrors} = useForm<FormsType>(\r\n        {\r\n            resolver: yupResolver(schema)\r\n        }\r\n    );\r\n\r\n    const onSubmit = (data: FormsType) => {\r\n        if (data.confirm_password === data.password) {\r\n            let newData = {\r\n                email: data.email,\r\n                password: data.password\r\n            }\r\n            dispatch(RegisterUserTC(newData))\r\n            console.log(newData);\r\n            reset()\r\n        } else {\r\n            setError('password', {message: 'Пароли не совпадают'})\r\n            setError('confirm_password', {message: 'Пароли не совпадают'})\r\n        }\r\n    }\r\n\r\n    const onBlur = () => {\r\n        dispatch(SetErrorMessageAC(''))\r\n        // clearErrors('password')\r\n        // clearErrors('confirm_password')\r\n        // clearErrors('email')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {newUserData.data.email.length > 0 && <Redirect to={'/login'}/>}\r\n            <div className={s.registerPage} onBlur={onBlur}>\r\n                <div className={s.registerBox}>\r\n                    <h1>REGISTER</h1>\r\n                    <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n                        <Controller\r\n                            as={<Input onChange={() => errors.email?.message === null}\r\n                                       error={errors.email?.message || newUserData.errorMessage}\r\n                                       type={'text'}\r\n                                       label={'Enter your login'}/>}\r\n                            name=\"email\"\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                        />\r\n                        <div className={s.errorMessageColor}>\r\n                            {errors.email?.message || newUserData.errorMessage}\r\n                        </div>\r\n\r\n                        <Controller\r\n                            as={<Input\r\n                                error={errors.password?.message}\r\n                                type={'password'}\r\n                                label={'password'}/>}\r\n                            name=\"password\"\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                        />\r\n                        <div className={s.errorMessageColor}>\r\n                            {errors.password?.message}\r\n                        </div>\r\n\r\n                        <Controller\r\n                            as={<Input onChange={() => errors.confirm_password?.message === null}\r\n                                       error={errors.confirm_password?.message}\r\n                                       type={'password'}\r\n                                       label={'confirm password'}/>}\r\n                            name=\"confirm_password\"\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                        />\r\n                        <div className={s.errorMessageColor}>\r\n                            {errors.confirm_password?.message}\r\n                        </div>\r\n\r\n                        <Button title={\"SEND\"}\r\n                                disable={props.isFetching}/>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Register\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {HashRouter, Route, Switch} from 'react-router-dom';\r\nimport Login from './main/authGroup/LoginPage/Login';\r\nimport Restore from \"./main/authGroup/RestorePage/Restore\";\r\nimport Profile from \"./main/ProfilePage/Profile\";\r\nimport NotFound from './main/NotFound/NotFound';\r\nimport Menu from \"./main/Menu/Menu\";\r\nimport RestoreChangePassword from \"./main/authGroup/RestorePage/RestoreChangePassword\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {StateType} from \"./store/redux-store\";\r\nimport Preloader from \"./Components/Preloader/Preloader\";\r\nimport Register from './main/authGroup/RegisterPage/Register';\r\n\r\n\r\nconst App = () => {\r\n\r\n    const isFetching = useSelector<StateType, boolean>(state => state.isFetching.isFetching)\r\n\r\n\r\n    return (\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n                {isFetching && <Preloader/>}\r\n                <Menu/>\r\n                <Switch>\r\n                    <Route path='/restore' render={() => (<Restore isFetching={isFetching}/>)}/>\r\n                    <Route exact path='/register' render={() => (<Register isFetching={isFetching}/>)}/>\r\n                    <Route exact path={['/login', '/']} render={() => (<Login isFetching={isFetching}/>)}/>\r\n                    <Route exact path='/profile' render={() => (<Profile isFetching={isFetching}/>)}/>\r\n                    <Route path='/changePassword' render={() => (<RestoreChangePassword isFetching={isFetching}/>)}/>\r\n                    <Route render={() => (<NotFound/>)}/>\r\n                </Switch>\r\n            </div>\r\n        </HashRouter>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store/redux-store\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>\n\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__2yOrF\",\"menuActive\":\"Menu_menuActive__1fkJz\",\"link\":\"Menu_link__wtBYG\",\"activeLink\":\"Menu_activeLink__3jOIJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Login_neon__2oOc0\",\"loginPage\":\"Login_loginPage__3QmJr\",\"loginFormContainer\":\"Login_loginFormContainer__1OO4x\",\"errorField\":\"Login_errorField__2fokP\",\"items\":\"Login_items__xfe4x\",\"text1\":\"Login_text1__2MhTi\",\"text\":\"Login_text__3qblI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Restore_neon__2xnCX\",\"restorePage\":\"Restore_restorePage__Yt06I\",\"restoreBlock\":\"Restore_restoreBlock__j8go8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Register_neon__3snfG\",\"registerPage\":\"Register_registerPage__22eL8\",\"registerBox\":\"Register_registerBox__byB-h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Button_neon__17sQT\",\"button\":\"Button_button__2OrEq\",\"loginButtonBody\":\"Button_loginButtonBody__3X43V\",\"link\":\"Button_link__w9gha\",\"btn-anim-1\":\"Button_btn-anim-1__2KaU3\",\"btn-anim-2\":\"Button_btn-anim-2__29h2Y\",\"btn-anim-3\":\"Button_btn-anim-3__2WLod\",\"btn-anim-4\":\"Button_btn-anim-4__kwUi5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Input_neon__2TJ1R\",\"inputBody\":\"Input_inputBody__2u4Qd\",\"error\":\"Input_error__hy98E\",\"shake\":\"Input_shake__tmaUI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Preloader_neon__3Tzof\",\"cssload_container\":\"Preloader_cssload_container__c-n8B\",\"cssload_speeding_wheel\":\"Preloader_cssload_speeding_wheel__1wLSN\",\"cssload-spin\":\"Preloader_cssload-spin__2PCcK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Checkbox_neon__1DTaF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"NotFound_neon__k5F0a\",\"notFoundPage\":\"NotFound_notFoundPage__3y1lY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Profile_neon__2N-I0\",\"profilePage\":\"Profile_profilePage__1-AUr\",\"profileContainer\":\"Profile_profileContainer__1bZij\",\"titleProfile\":\"Profile_titleProfile__3wYad\",\"profileContent\":\"Profile_profileContent__19_nR\",\"cardField\":\"Profile_cardField__2SM4_\"};"],"sourceRoot":""}