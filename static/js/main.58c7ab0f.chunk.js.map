{"version":3,"sources":["main/Menu/Menu.module.scss","main/authGroup/RestorePage/Restore.module.scss","main/authGroup/LoginPage/Login.module.scss","Components/Input/Input.module.scss","main/authGroup/RegisterPage/Register.module.scss","Components/Button/Button.module.scss","main/ProfilePage/Profile.module.scss","Components/Checkbox/Checkbox.module.scss","main/NotFound/NotFound.module.scss","serviceWorker.ts","store/ProfileReducer.ts","api/authAPI.ts","store/LoginReducer.ts","api/api.ts","store/RegisterReducer.ts","store/RestoreReducer.ts","store/ChangePasswordReducer.ts","store/redux-store.ts","Components/Button/Button.tsx","Components/Input/Input.tsx","Components/Checkbox/Checkbox.tsx","main/authGroup/LoginPage/LoginForm.tsx","main/authGroup/LoginPage/Login.tsx","main/authGroup/RestorePage/Restore.tsx","main/ProfilePage/Profile.tsx","main/NotFound/NotFound.tsx","main/Menu/Menu.tsx","main/authGroup/RestorePage/RestoreChangePassword.tsx","Components/Input/InputHOC.tsx","main/authGroup/RegisterPage/RegisterWithHookForm.tsx","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","initialState","instance","axios","create","baseURL","authAPI","email","password","rememberMe","post","_id","name","error","verified","publicCardPacksCount","isAdmin","created","updated","setUser","user","type","setError","withCredentials","RegisterAPI","data","then","res","responseLoading","setResponseLoading","value","RestoreApi","restore","message","changePassword","resetPasswordToken","href","split","reducers","combineReducers","profile","state","login","action","register","isLoading","store","createStore","applyMiddleware","thunkMiddleWare","Button","props","className","s","loginButtonBody","link","onClick","disabled","disable","button","title","Input","inputBody","onChange","label","Checkbox","checked","checkbox","LoginForm","dispatch","useDispatch","useSelector","useState","loginValue","setLoginValue","passValue","setPassValue","setChecked","e","currentTarget","a","promise","console","log","response","Login","loginPage","loginFormContainer","items","text1","to","text","Restore","useForm","control","handleSubmit","restorePage","loginBlock","restoreBlock","errorMessage","onSubmit","status","catch","RestoreTC","as","defaultValue","Profile","profilePage","profileContainer","NotFound","notFoundPage","Menu","isHide","setIsHide","menu","menuActive","activeClassName","activeLink","RestoreChangePassword","InputForm","required","placeholder","ref","schema","yup","shape","min","RegisterWithHookForm","React","memo","newUserData","resolver","yupResolver","errors","watch","registerPage","registerBox","SetRegisterDataAC","addedUser","RegisterUserTC","App","path","render","exact","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58c7ab0f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__2yOrF\",\"menuActive\":\"Menu_menuActive__1fkJz\",\"link\":\"Menu_link__wtBYG\",\"activeLink\":\"Menu_activeLink__3jOIJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Restore_neon__2xnCX\",\"restorePage\":\"Restore_restorePage__Yt06I\",\"loginBlock\":\"Restore_loginBlock__KEPf9\",\"restoreBlock\":\"Restore_restoreBlock__j8go8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Login_neon__2oOc0\",\"loginPage\":\"Login_loginPage__3QmJr\",\"loginFormContainer\":\"Login_loginFormContainer__1OO4x\",\"items\":\"Login_items__xfe4x\",\"text1\":\"Login_text1__2MhTi\",\"text\":\"Login_text__3qblI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Input_neon__2TJ1R\",\"inputBody\":\"Input_inputBody__2u4Qd\",\"error\":\"Input_error__hy98E\",\"shake\":\"Input_shake__tmaUI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Register_neon__3snfG\",\"registerPage\":\"Register_registerPage__22eL8\",\"registerBox\":\"Register_registerBox__byB-h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Button_neon__17sQT\",\"button\":\"Button_button__2OrEq\",\"loginButtonBody\":\"Button_loginButtonBody__3X43V\",\"link\":\"Button_link__w9gha\",\"btn-anim-1\":\"Button_btn-anim-1__2KaU3\",\"btn-anim-2\":\"Button_btn-anim-2__29h2Y\",\"btn-anim-3\":\"Button_btn-anim-3__2WLod\",\"btn-anim-4\":\"Button_btn-anim-4__kwUi5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Profile_neon__2N-I0\",\"profilePage\":\"Profile_profilePage__1-AUr\",\"profileContainer\":\"Profile_profileContainer__1bZij\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Checkbox_neon__1DTaF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"NotFound_neon__k5F0a\",\"notFoundPage\":\"NotFound_notFoundPage__3y1lY\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export type ActionsType={\r\n\r\n}\r\n\r\nlet initialState = {\r\n\r\n}\r\n\r\nexport const ProfileReducer = (state = initialState, action: ActionsType) => {\r\n\r\n    return state\r\n}\r\n","import axios from 'axios'\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"http://localhost:7542/2.0/\"\r\n})\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean = false){\r\n       return instance.post('/auth/login', {email, password, rememberMe})\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/authAPI\";\r\n\r\ntype InitialState = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number // количество колод\r\n    created: string // Data\r\n    updated: string // Data\r\n    isAdmin: boolean\r\n    verified: boolean // подтвердил ли почту\r\n    rememberMe: boolean\r\n    token?: string,\r\n    tokenDeathTime?: number\r\n    error: string\r\n}\r\n\r\n\r\nconst initialState: InitialState = {\r\n    _id: '',\r\n    email: '',\r\n    name: '',\r\n    rememberMe: false,\r\n    error: '',\r\n    verified: false,\r\n    publicCardPacksCount: 0,\r\n    isAdmin: false,\r\n    created: '',\r\n    updated: ''\r\n}\r\n\r\nexport const LoginReducer = (state: InitialState = initialState, action: ActionType): InitialState => {\r\n    switch (action.type) {\r\n        case \"login/SET_USER\":\r\n            return {...action.user}\r\n        case \"login/SET_ERROR\":\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//thunk\r\nexport const setLogin = (email: string, password: string, rememberMe: boolean) => async (dispatch: Dispatch) => {\r\n    try {\r\n        const promise = await authAPI.login(email, password, rememberMe)\r\n        dispatch(setUser(promise.data))\r\n        console.log(promise)\r\n    } catch (e) {\r\n        const error = e.response ? e.response.data.error : (e.message + ', more details in the console');\r\n        console.log('Error: ', error)\r\n        dispatch(setError(error))\r\n    }\r\n}\r\n\r\n// export const registerUser = (email: string, password: string) => async (dispatch: Dispatch) => {\r\n//     try {\r\n//         const promise = await authAPI.register(email, password)\r\n//         console.log(promise.data)\r\n//     }catch (e) {\r\n//         const error = e.response ? e.response.data.error : (e.message + ', more details in the console');\r\n//         console.log('Error: ', error)\r\n//     }\r\n// }\r\n//AC\r\nexport const setUser = (user: InitialState) => ({type: 'login/SET_USER', user} as const)\r\nexport const setError = (error: string) => ({type: 'login/SET_ERROR', error} as const)\r\n\r\nexport type SetUserType = ReturnType<typeof setUser>\r\nexport type SetError = ReturnType<typeof setError>\r\n\r\ntype ActionType = SetUserType\r\n    | SetError","import axios from 'axios'\r\nimport {initialStateType} from \"../store/RegisterReducer\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials:true,\r\n    baseURL:\"http://localhost:7542/2.0/\"\r\n})\r\n\r\ntype RegisterResponseType={\r\n    addedUser:initialStateType\r\n    error:string\r\n}\r\n\r\nexport const RegisterAPI = {\r\n    RegisterUser:(data:initialStateType)=>{\r\n        return instance.post<RegisterResponseType>('auth/register/', data).then(res=>res.data)\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {RegisterAPI} from \"../api/api\";\r\n\r\nexport type ActionsType = SetRegisterDataAcType\r\n\r\nlet initialState = {\r\n    email: '',\r\n    password: ''\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nexport const RegisterReducer = (state:initialStateType = initialState, action: ActionsType):initialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-REGISTER-DATA\":{\r\n            return {\r\n                ...state, ...action.data\r\n            }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const SetRegisterDataAC = (data:initialStateType)=>{\r\n    return{type:\"SET-REGISTER-DATA\", data} as const\r\n}\r\n\r\nexport const RegisterUserTC = (data:initialStateType)=>{\r\n    return (dispatch:Dispatch)=>{\r\n        debugger\r\n        RegisterAPI.RegisterUser(data).then(res=>{\r\n            debugger\r\n            if (!res.error) {\r\n                dispatch(SetRegisterDataAC(res.addedUser))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\ntype SetRegisterDataAcType = ReturnType<typeof SetRegisterDataAC>\r\n\r\n","import {RestoreFormInput} from \"../main/authGroup/RestorePage/Restore\"\r\nimport {Dispatch} from \"redux\";\r\nimport axios from 'axios'\r\nimport {ChangePasswordFormInput} from \"../main/authGroup/RestorePage/RestoreChangePassword\";\r\n\r\nexport type ActionsType = SetLoadingType | SetDisableButtonType\r\n\r\nexport type InitialRestoreStateType = {\r\n    responseLoading: boolean\r\n    error: string | null\r\n}\r\n\r\nlet initialState: InitialRestoreStateType = {\r\n    responseLoading: false,\r\n    error: null\r\n}\r\n\r\nexport const RestoreReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'RESTORE/SET_RESPONSE_LOADING' :\r\n            return { ...state, isLoading: action.value}\r\n        case 'RESTORE/SET_ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setError = (error: string | null) => ({\r\n    type: 'RESTORE/SET_ERROR', error\r\n} as const)\r\nexport const setResponseLoading = (value: boolean) => ({\r\n    type: 'RESTORE/SET_RESPONSE_LOADING', value\r\n} as const)\r\n\r\n//types\r\nexport type SetLoadingType = ReturnType<typeof setError>\r\nexport type SetDisableButtonType = ReturnType<typeof setResponseLoading>\r\n\r\n\r\n//thunk\r\nexport const RestoreTC = (data: RestoreFormInput) => (dispatch: Dispatch) => {\r\n    dispatch(setResponseLoading(true))\r\n    RestoreApi.restore(data)\r\n        .then(res => {\r\n            if( res.status === 200) {\r\n                dispatch(setResponseLoading(false))\r\n                dispatch(setError('Перейдите по ссылке на Email'))\r\n            }\r\n            }\r\n        )\r\n        .catch(e => {\r\n            dispatch(setResponseLoading(false))\r\n            dispatch(setError(e.response.data.error))\r\n        })\r\n    dispatch(setResponseLoading(false))\r\n}\r\n\r\nexport const ChangePasswordTC = (password: ChangePasswordFormInput) => (dispatch: Dispatch) => {\r\n    dispatch(setResponseLoading(true))\r\n    RestoreApi.changePassword(password)\r\n        .then( res => {\r\n            if(res.status === 200) {\r\n                dispatch(setResponseLoading(false))\r\n            }\r\n            console.log(res)\r\n        })\r\n        .catch(e => {\r\n            dispatch(setResponseLoading(false))\r\n            dispatch(setError(e.response.data.error))\r\n        })\r\n}\r\n\r\n\r\n\r\n//api\r\nexport const RestoreApi = {\r\n    restore(data: RestoreFormInput) {\r\n        const email = data.email\r\n        return axios.post('https://neko-back.herokuapp.com/2.0/auth/forgot', {\r\n            email,\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\r\n                          password recovery link: \r\n                          <a href='http://localhost:3000/neko-card-react-ts-project#/changePassword/$token$'>link</a>\r\n                      </div> `\r\n        })\r\n    },\r\n    changePassword(data: ChangePasswordFormInput) {\r\n        const resetPasswordToken = window.location.href.split('/')[5]\r\n        const password = data.password\r\n        return axios.post('https://neko-back.herokuapp.com/2.0/auth/set-new-password' , {password, resetPasswordToken})\r\n    }\r\n}\r\n","export type ActionsType={\r\n\r\n}\r\n\r\nlet initialState = {\r\n\r\n}\r\n\r\nexport const ChangePasswordReducer = (state = initialState, action: ActionsType) => {\r\n    return state\r\n}\r\n","import {combineReducers, createStore, applyMiddleware} from 'redux';\r\nimport {ProfileReducer} from \"./ProfileReducer\";\r\nimport {LoginReducer} from \"./LoginReducer\";\r\nimport {RegisterReducer} from \"./RegisterReducer\";\r\nimport {RestoreReducer} from \"./RestoreReducer\";\r\nimport {ChangePasswordReducer} from \"./ChangePasswordReducer\";\r\nimport thunkMiddleWare from \"redux-thunk\"\r\n\r\nlet reducers = combineReducers({\r\n    profile: ProfileReducer,\r\n    login: LoginReducer,\r\n    register: RegisterReducer,\r\n    restore: RestoreReducer,\r\n    changePassword: ChangePasswordReducer\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleWare))\r\n\r\nexport type StateType = ReturnType<typeof reducers>\r\n\r\nexport default store\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport s from './Button.module.scss'\r\n\r\ntype ButtonType = {\r\n    title?: string\r\n    onClick?: () => void\r\n    disable?: boolean\r\n}\r\n\r\nconst Button = (props: ButtonType) => {\r\n    return (\r\n        <div className={s.loginButtonBody}>\r\n            <span className={s.link}>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                <button onClick={props.onClick} disabled={props.disable} className={s.button}>\r\n                    {props.title}\r\n                </button>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button","import React, {ChangeEvent} from \"react\";\r\nimport s from './Input.module.scss'\r\n\r\ntype InputType = {\r\n    label?: string\r\n    type?: string\r\n    value?: string\r\n    onChange?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    error?: string | null\r\n}\r\n\r\nconst Input = (props: InputType) => {\r\n    return (\r\n        <div className={props.error ? s.error : s.inputBody}>\r\n            <input value={props.value}\r\n                   type={props.type}\r\n                   onChange={props.onChange}/>\r\n            {!props.value ? <label>{props.label}</label> : ''}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input","import React, {ChangeEvent} from 'react';\r\nimport s from './Checkbox.module.scss'\r\n\r\ntype CheckboxType = {\r\n    checked?: boolean\r\n    onChange?: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst Checkbox = (props: CheckboxType) => {\r\n    return (\r\n        <div >\r\n            <input  checked={props.checked}\r\n                    onChange={props.onChange}\r\n                    className={s.checkbox}\r\n                    type={'checkbox'}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Checkbox","import React, {ChangeEvent, useState} from 'react';\r\nimport Button from \"../../../Components/Button/Button\";\r\nimport Input from \"../../../Components/Input/Input\";\r\nimport Checkbox from \"../../../Components/Checkbox/Checkbox\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setLogin} from \"../../../store/LoginReducer\";\r\nimport {StateType} from \"../../../store/redux-store\";\r\n\r\ntype LoginFormType = {\r\n    className?: string\r\n}\r\n\r\nconst LoginForm = (props: LoginFormType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<StateType, string>(state => state.login.error)\r\n\r\n    let [loginValue, setLoginValue] = useState('')\r\n    let [passValue, setPassValue] = useState('')\r\n    let [checked, setChecked] = useState(false)\r\n\r\n    const onChangeLoginValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLoginValue(e.currentTarget.value)\r\n    }\r\n    const onChangePassValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassValue(e.currentTarget.value)\r\n    }\r\n    const onChangeChecked = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setChecked(e.currentTarget.checked)\r\n    }\r\n    const onSubmit = () => {\r\n        dispatch(setLogin(loginValue, passValue, checked))\r\n    }\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            <Input label={'Login'} value={loginValue} onChange={onChangeLoginValue} error={error}/>\r\n            <Input type={'password'} label={'Password'} value={passValue} onChange={onChangePassValue} error={error}/>\r\n            <Checkbox checked={checked} onChange={onChangeChecked}/>\r\n            <Button title={'login'} onClick={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React from 'react';\r\nimport s from './Login.module.scss'\r\nimport {NavLink} from 'react-router-dom';\r\nimport LoginForm from \"./LoginForm\";\r\n\r\ntype LoginType = {\r\n\r\n}\r\n\r\nconst Login = (props: LoginType) => {\r\n\r\n    return (\r\n        <div className={s.loginPage}>\r\n            <div className={s.loginFormContainer} >\r\n                <h1> LOGIN </h1>\r\n                <LoginForm className={s.loginFormContainer} />\r\n                <div className={s.items}>\r\n                    <NavLink className={s.text1} to='/restore'>Forgot your password?</NavLink>\r\n                    <NavLink className={s.text} to='/register'>Register</NavLink>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","import React from 'react';\r\nimport s from './Restore.module.scss'\r\nimport Input from \"../../../Components/Input/Input\";\r\nimport LoginForm from '../LoginPage/LoginForm';\r\nimport Button from \"../../../Components/Button/Button\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {InitialRestoreStateType, RestoreTC} from '../../../store/RestoreReducer';\r\nimport {StateType} from \"../../../store/redux-store\";\r\n\r\ntype RestoreProps = {}\r\n\r\nexport type RestoreFormInput = {\r\n    email: string;\r\n}\r\n\r\nconst Restore = (props: RestoreProps) => {\r\n    const dispatch = useDispatch()\r\n    const {control, handleSubmit} = useForm<RestoreFormInput>();\r\n    const restore = useSelector<StateType, InitialRestoreStateType>(state => state.restore)\r\n\r\n    const onSubmit = (data: RestoreFormInput) => {\r\n        dispatch(RestoreTC(data))\r\n    };\r\n\r\n    if (restore.responseLoading) {\r\n        return <h1>Loading...</h1>\r\n    }\r\n\r\n    return (\r\n        <div className={s.restorePage}>\r\n            <div>\r\n                <LoginForm className={s.loginBlock}/>\r\n            </div>\r\n            <div className={s.restoreBlock}>\r\n                {!restore.error\r\n                    ? <h1>Forgot you password?</h1>\r\n                    : <h2 className={s.errorMessage}>{restore.error}</h2>\r\n                }\r\n\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <Controller\r\n                        as={<Input error={restore.error} label={'Enter your login'}/>}\r\n                        name=\"email\"\r\n                        control={control}\r\n                        defaultValue=\"\"\r\n                    />\r\n                    <Button disable={restore.responseLoading} title={'SEND'}/>\r\n                </form>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Restore","import React from 'react';\r\nimport s from './Profile.module.scss'\r\n\r\ntype ProfileType = {\r\n\r\n}\r\n\r\nconst Profile = (props: ProfileType) => {\r\n    return (\r\n        <div className={s.profilePage}>\r\n            <div className={s.profileContainer}>\r\n                <h1>profile</h1>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react';\r\nimport s from './NotFound.module.scss'\r\n\r\n\r\nconst NotFound = (props: any) => {\r\n\r\n    return (\r\n        <div className={s.notFoundPage}>\r\n            <h1>404</h1>\r\n            <div>\r\n                <h1>not found</h1>\r\n                <div>тест</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound","import React, {useState} from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from './Menu.module.scss'\r\n\r\nconst Menu = () => {\r\n\r\n    const [isHide, setIsHide] = useState(false)\r\n\r\n    const showMenu = () => {\r\n        setIsHide(false)\r\n    }\r\n    const hideMenu = () => {\r\n        setIsHide(true)\r\n    }\r\n\r\n    return (\r\n        <div className={s.menu}>\r\n            {isHide\r\n                ? <button onClick={showMenu}>menu</button>\r\n                : <div className={s.menuActive}>\r\n                    <button onClick={hideMenu}>menu</button>\r\n                    <NavLink to='/restore' className={s.link} activeClassName={s.activeLink}>Forgot password</NavLink>\r\n                    <NavLink to='/register' className={s.link} activeClassName={s.activeLink}>Register</NavLink>\r\n                    <NavLink to='/login' className={s.link} activeClassName={s.activeLink}>Login</NavLink>\r\n                    <NavLink to='/profile' className={s.link} activeClassName={s.activeLink}>Profile</NavLink>\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Menu","import React from 'react';\r\nimport s from './Restore.module.scss'\r\nimport Input from \"../../../Components/Input/Input\";\r\nimport LoginForm from '../LoginPage/LoginForm';\r\nimport Button from \"../../../Components/Button/Button\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ChangePasswordTC, InitialRestoreStateType} from \"../../../store/RestoreReducer\";\r\nimport {StateType} from \"../../../store/redux-store\";\r\n\r\ntype ChangePasswordPropsType = {}\r\n\r\nexport type ChangePasswordFormInput = {\r\n    password: string,\r\n    repeat_password: string\r\n}\r\n\r\nconst RestoreChangePassword = (props: ChangePasswordPropsType) => {\r\n    const changePassword = useSelector<StateType, InitialRestoreStateType>(state => state.restore)\r\n    const dispatch = useDispatch()\r\n\r\n    const {control, handleSubmit} = useForm<ChangePasswordFormInput>();\r\n\r\n    const onSubmit = (data: ChangePasswordFormInput) => {\r\n        dispatch(ChangePasswordTC(data))\r\n    };\r\n\r\n    return (\r\n        <div className={s.restorePage}>\r\n            <div>\r\n                <LoginForm className={s.loginBlock}/>\r\n            </div>\r\n\r\n            <div className={s.restoreBlock}>\r\n                {\r\n                    !changePassword.error\r\n                        ? <h1>Please, set your new Password</h1>\r\n                        : <h2 className={s.errorMessage}>{changePassword.error || 'Error'}</h2>\r\n                }\r\n\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <Controller\r\n                        as={<Input error={changePassword.error} label={'password'}/>}\r\n                        name=\"password\"\r\n                        control={control}\r\n                        defaultValue=\"\"\r\n                    />\r\n                    <Controller\r\n                        as={<Input error={changePassword.error} label={'repeat password'}/>}\r\n                        name=\"repeat_password\"\r\n                        control={control}\r\n                        defaultValue=\"\"\r\n                    />\r\n                    <Button disable={changePassword.responseLoading} title={'SEND'}/>\r\n                </form>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RestoreChangePassword","import React from \"react\";\r\nimport s from './Input.module.scss'\r\n\r\n\r\ntype RefReturn =\r\n    | string\r\n    | ((instance: HTMLInputElement | null) => void)\r\n    | React.RefObject<HTMLInputElement>\r\n    | null\r\n    | undefined;\r\n\r\ntype InputProps = React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>,\r\n    HTMLInputElement> & {\r\n    label: string;\r\n    register: ({required}: { required?: boolean }) => RefReturn;\r\n};\r\n\r\n\r\nexport const InputForm: React.FC<InputProps> = ({label, register, required, placeholder,type}) => {\r\n    return (\r\n        <div className={ s.inputBody}>\r\n            <input\r\n                name={label}\r\n                ref={register({ required })}\r\n                placeholder={placeholder}\r\n                type={type}\r\n                />\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport * as yup from \"yup\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport s from \"./Register.module.scss\";\r\nimport {InputForm} from \"../../../Components/Input/InputHOC\";\r\nimport Button from \"../../../Components/Button/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {initialStateType, RegisterUserTC, SetRegisterDataAC} from \"../../../store/RegisterReducer\";\r\nimport {StateType} from \"../../../store/redux-store\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nexport const schema = yup.object().shape({\r\n    password: yup.string().required().min(5),\r\n    email: yup.string().required().email(),\r\n});\r\n\r\nexport const RegisterWithHookForm = React.memo(() => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const newUserData = useSelector<StateType, initialStateType>(state => state.register)\r\n\r\n\r\n\r\n    type FormsType = {\r\n        \"password\": string\r\n        \"email\": string\r\n    }\r\n    const {register, handleSubmit, watch, errors} = useForm<FormsType>({\r\n        resolver: yupResolver(schema)\r\n    });\r\n\r\n    const onSubmit = (data: FormsType) => {\r\n        dispatch(RegisterUserTC(data))\r\n        console.log(data);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {newUserData.email && <Redirect to={'/login'}/>}\r\n            <div className={s.registerPage}>\r\n                <div className={s.registerBox}>\r\n                    <h1>REGISTER</h1>\r\n                    <form onSubmit={handleSubmit(onSubmit)}>\r\n                        <div>\r\n                            <InputForm\r\n                                register={register}\r\n                                label='email'\r\n                                type={'text'}\r\n                                placeholder={'email'}\r\n                            />\r\n                            {errors.email?.message}\r\n                        </div>\r\n                        <div className={errors ? s.error : s.inputBody}>\r\n                            <InputForm\r\n                                register={register}\r\n                                label='password'\r\n                                type={'password'}\r\n                                placeholder={'password'}\r\n                            />\r\n                            {errors.password?.message}\r\n                        </div>\r\n                        <Button title={\"SEND\"}/>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {HashRouter, Route, Switch} from 'react-router-dom';\r\nimport Login from './main/authGroup/LoginPage/Login';\r\nimport Restore from \"./main/authGroup/RestorePage/Restore\";\r\nimport Profile from \"./main/ProfilePage/Profile\";\r\nimport NotFound from './main/NotFound/NotFound';\r\nimport Menu from \"./main/Menu/Menu\";\r\nimport RestoreChangePassword from \"./main/authGroup/RestorePage/RestoreChangePassword\";\r\nimport {RegisterWithHookForm} from \"./main/authGroup/RegisterPage/RegisterWithHookForm\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n                <Menu/>\r\n\r\n                <Switch>\r\n                    <Route path='/restore' render={() => (<Restore/>)}/>\r\n                    <Route exact path='/register' render={() => (<RegisterWithHookForm/>)}/>\r\n                    <Route exact path={['/login', '/']} render={() => (<Login/>)}/>\r\n                    <Route exact path='/profile' render={() => (<Profile/>)}/>\r\n                    <Route path='/changePassword' render={() => (<RestoreChangePassword/>)}/>\r\n                    <Route render={() => (<NotFound/>)}/>\r\n                </Switch>\r\n            </div>\r\n        </HashRouter>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store/redux-store\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>\n\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}