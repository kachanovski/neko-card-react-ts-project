{"version":3,"sources":["main/authGroup/LoginPage/Login.module.scss","main/Menu/Menu.module.scss","Components/Input/Input.module.scss","main/authGroup/RestorePage/Restore.module.scss","Components/Button/Button.module.scss","main/ProfilePage/Profile.module.scss","main/authGroup/RegisterPage/Register.module.scss","Components/Checkbox/Checkbox.module.scss","main/NotFound/NotFound.module.scss","serviceWorker.ts","store/ProfileReducer.ts","api/authAPI.ts","store/LoginReducer.ts","api/registerAPI.ts","store/RegisterReducer.ts","store/RestoreReducer.ts","store/ChangePasswordReducer.ts","store/redux-store.ts","Components/Button/Button.tsx","Components/Input/Input.tsx","Components/Checkbox/Checkbox.tsx","main/authGroup/LoginPage/LoginForm.tsx","main/authGroup/LoginPage/Login.tsx","main/authGroup/RestorePage/Restore.tsx","main/ProfilePage/Profile.tsx","main/NotFound/NotFound.tsx","main/Menu/Menu.tsx","main/authGroup/RestorePage/RestoreChangePassword.tsx","Components/Input/InputHOC.tsx","main/authGroup/RegisterPage/RegisterWithHookForm.tsx","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","initialState","instance","axios","create","baseURL","authAPI","email","password","rememberMe","post","_id","name","error","verified","publicCardPacksCount","isAdmin","created","updated","isFetching","setUser","user","type","setError","isFetch","setErrorInPass","errorIn","withCredentials","RegisterAPI","data","then","res","errorMessage","registerFetching","SetErrorMessageAC","message","SetRegisterFetchingAC","responseLoading","success","setResponseLoading","value","setSuccessRequest","RestoreApi","restore","changePassword","passwordToken","href","split","reducers","combineReducers","profile","state","login","action","register","isLoading","store","createStore","applyMiddleware","thunkMiddleWare","Button","props","className","s","loginButtonBody","link","onClick","disabled","disable","button","title","Input","inputBody","onChange","ref","label","Checkbox","checked","checkbox","schemaLogin","yup","shape","required","min","LoginForm","useForm","resolver","yupResolver","handleSubmit","errors","dispatch","useDispatch","useSelector","onSubmit","a","promise","console","log","response","errorField","Login","loginPage","loginFormContainer","items","text1","to","text","schema","Restore","control","restorePage","loginBlock","restoreBlock","status","catch","e","RestoreTC","as","defaultValue","Profile","profilePage","profileContainer","NotFound","notFoundPage","Menu","useState","isHide","setIsHide","menu","menuActive","activeClassName","activeLink","RestoreChangePassword","repeat_password","InputForm","placeholder","confirm_password","RegisterWithHookForm","React","memo","newUserData","reset","length","registerPage","onBlur","registerBox","newData","SetRegisterDataAC","addedUser","RegisterUserTC","err","App","path","render","exact","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ea1f5dfd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Login_neon__2oOc0\",\"loginPage\":\"Login_loginPage__3QmJr\",\"loginFormContainer\":\"Login_loginFormContainer__1OO4x\",\"errorField\":\"Login_errorField__2fokP\",\"items\":\"Login_items__xfe4x\",\"text1\":\"Login_text1__2MhTi\",\"text\":\"Login_text__3qblI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__2yOrF\",\"menuActive\":\"Menu_menuActive__1fkJz\",\"link\":\"Menu_link__wtBYG\",\"activeLink\":\"Menu_activeLink__3jOIJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Input_neon__2TJ1R\",\"inputBody\":\"Input_inputBody__2u4Qd\",\"error\":\"Input_error__hy98E\",\"shake\":\"Input_shake__tmaUI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Restore_neon__2xnCX\",\"restorePage\":\"Restore_restorePage__Yt06I\",\"loginBlock\":\"Restore_loginBlock__KEPf9\",\"restoreBlock\":\"Restore_restoreBlock__j8go8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Button_neon__17sQT\",\"button\":\"Button_button__2OrEq\",\"loginButtonBody\":\"Button_loginButtonBody__3X43V\",\"link\":\"Button_link__w9gha\",\"btn-anim-1\":\"Button_btn-anim-1__2KaU3\",\"btn-anim-2\":\"Button_btn-anim-2__29h2Y\",\"btn-anim-3\":\"Button_btn-anim-3__2WLod\",\"btn-anim-4\":\"Button_btn-anim-4__kwUi5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Profile_neon__2N-I0\",\"profilePage\":\"Profile_profilePage__1-AUr\",\"profileContainer\":\"Profile_profileContainer__1bZij\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Register_neon__3snfG\",\"registerPage\":\"Register_registerPage__22eL8\",\"registerBox\":\"Register_registerBox__byB-h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"Checkbox_neon__1DTaF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neon\":\"NotFound_neon__k5F0a\",\"notFoundPage\":\"NotFound_notFoundPage__3y1lY\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export type ActionsType={\r\n\r\n}\r\n\r\nlet initialState = {\r\n\r\n}\r\n\r\nexport const ProfileReducer = (state = initialState, action: ActionsType) => {\r\n\r\n    return state\r\n}\r\n","import axios from 'axios'\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"http://localhost:7542/2.0/\"\r\n})\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean = false){\r\n       return instance.post('/auth/login', {email, password, rememberMe})\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/authAPI\";\r\n\r\nexport type InitialLoginReducerState = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number // количество колод\r\n    created: string // Data\r\n    updated: string // Data\r\n    isAdmin: boolean\r\n    verified: boolean // подтвердил ли почту\r\n    rememberMe: boolean\r\n    token?: string,\r\n    tokenDeathTime?: number\r\n    error: string,\r\n    isFetching: boolean,\r\n    errorIn?: ErrorInType\r\n}\r\n\r\n\r\nconst initialState: InitialLoginReducerState = {\r\n    _id: '',\r\n    email: '',\r\n    name: '',\r\n    rememberMe: false,\r\n    error: '',\r\n    verified: false,\r\n    publicCardPacksCount: 0,\r\n    isAdmin: false,\r\n    created: '',\r\n    updated: '',\r\n    isFetching: false,\r\n\r\n}\r\n\r\nexport const LoginReducer = (state: InitialLoginReducerState = initialState, action: ActionType): InitialLoginReducerState => {\r\n    switch (action.type) {\r\n        case \"login/SET_USER\":\r\n            return {...action.user}\r\n        case \"login/SET_ERROR\":\r\n            return {...state, error: action.error}\r\n        case \"login/SET_FETCHING\":\r\n            return {...state, isFetching: action.isFetch}\r\n        case \"login/SET_ERROR_IN_PASS\":\r\n            return {...state, errorIn: action.errorIn}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//thunk\r\nexport const setLogin = (email: string, password: string, rememberMe: boolean) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(isFetching(true))\r\n        const promise = await authAPI.login(email, password, rememberMe)\r\n        dispatch(setUser(promise.data))\r\n        console.log(promise)\r\n    } catch (e) {\r\n        debugger\r\n        if (e.response) {\r\n            console.log('ERROR: ', e.response.data.error)\r\n            if (e.response.data.password) {\r\n                dispatch(setErrorInPass(\"password\"))\r\n            } else if (e.response.data.email) {\r\n                dispatch(setErrorInPass(\"email\"))\r\n            }\r\n            dispatch(setError(e.response.data.error))\r\n        } else {\r\n            console.log('ERROR: ', e.message + ', more details in the console')\r\n        }\r\n        // const error = e.response ? e.response.data.error : (e.message + ', more details in the console');\r\n        // console.log('Error: ', error)\r\n        // dispatch(setError(error))\r\n    }\r\n    dispatch(isFetching(false))\r\n}\r\n\r\ntype ErrorInType = 'password' | 'email'\r\n//AC\r\nexport const setUser = (user: InitialLoginReducerState) => ({type: 'login/SET_USER', user} as const)\r\nexport const setError = (error: string) => ({type: 'login/SET_ERROR', error} as const)\r\nexport const isFetching = (isFetch: boolean) => ({type: 'login/SET_FETCHING', isFetch} as const)\r\nexport const setErrorInPass = (errorIn: ErrorInType) => ({type: 'login/SET_ERROR_IN_PASS', errorIn} as const)\r\n\r\nexport type SetUserType = ReturnType<typeof setUser>\r\nexport type SetError = ReturnType<typeof setError>\r\nexport type IsFetch = ReturnType<typeof isFetching>\r\nexport type ErrorPass = ReturnType<typeof setErrorInPass>\r\n\r\ntype ActionType = SetUserType | SetError | IsFetch | ErrorPass","import axios from 'axios'\r\nimport { RegisterUserDataType} from \"../store/RegisterReducer\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials:true,\r\n    baseURL:\"http://localhost:7542/2.0/\"\r\n})\r\n\r\ntype RegisterResponseType={\r\n    addedUser:RegisterUserDataType\r\n    error:string\r\n}\r\n\r\nexport const RegisterAPI = {\r\n    RegisterUser:(data:RegisterUserDataType)=>{\r\n        return instance.post<RegisterResponseType>('auth/register/', data).then(res=>res)}\r\n}","import {Dispatch} from \"redux\";\r\nimport {RegisterAPI} from \"../api/registerAPI\";\r\n\r\nexport type ActionsType =\r\n    SetRegisterDataAcType\r\n    | SetErrorMessageAcType\r\n    | SetRegisterFetchingAcType\r\n\r\nexport type RegisterUserDataType={\r\n    email:string\r\n    password:string\r\n}\r\n\r\nlet initialState = {\r\n   data: {\r\n       email: '',\r\n       password: '',\r\n   },\r\n    errorMessage: '',\r\n    registerFetching: false,\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nexport const RegisterReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"REGISTER/SET-REGISTER-DATA\": {\r\n            return {\r\n                ...state,\r\n              ...state.data, data: action.data\r\n            }\r\n        }\r\n        case \"REGISTER/SET-ERROR-MESSAGE-TYPE\": {\r\n            return {\r\n                ...state,\r\n                errorMessage: action.message\r\n            }\r\n        }\r\n        case \"REGISTER/TOGGLE-REGISTER-FETCHING\":{\r\n            return {\r\n                ...state,\r\n                registerFetching: action.registerFetching\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const SetRegisterDataAC = (data:RegisterUserDataType) => {\r\n    return {type: \"REGISTER/SET-REGISTER-DATA\", data} as const\r\n}\r\nexport const SetErrorMessageAC = (message: string) => {\r\n    return {type: \"REGISTER/SET-ERROR-MESSAGE-TYPE\", message} as const\r\n}\r\nexport const SetRegisterFetchingAC = (registerFetching: boolean) => {\r\n    return {type: \"REGISTER/TOGGLE-REGISTER-FETCHING\", registerFetching} as const\r\n}\r\n\r\nexport const RegisterUserTC = (data: RegisterUserDataType) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(SetRegisterFetchingAC(true))\r\n        RegisterAPI.RegisterUser(data)\r\n            .then(res => {\r\n                if (!res.data.error) {\r\n                    dispatch(SetRegisterDataAC(res.data.addedUser))\r\n                }\r\n                dispatch(SetErrorMessageAC(res.data.error))\r\n            })\r\n            .catch(e => {\r\n                    dispatch(SetErrorMessageAC(e.response.data.error))\r\n                }\r\n            )\r\n        dispatch(SetRegisterFetchingAC(false))\r\n    }\r\n}\r\n\r\ntype SetRegisterDataAcType = ReturnType<typeof SetRegisterDataAC>\r\ntype SetErrorMessageAcType = ReturnType<typeof SetErrorMessageAC>\r\ntype SetRegisterFetchingAcType = ReturnType<typeof SetRegisterFetchingAC>\r\n\r\n","import {RestoreFormInput} from \"../main/authGroup/RestorePage/Restore\"\r\nimport {Dispatch} from \"redux\";\r\nimport axios from 'axios'\r\nimport {ChangePasswordFormInput} from \"../main/authGroup/RestorePage/RestoreChangePassword\";\r\n\r\nexport type ActionsType = SetLoadingType | SetDisableButtonType | SetSuccessRequest\r\n\r\nexport type InitialRestoreStateType = {\r\n    responseLoading: boolean\r\n    error: string | null\r\n    success: boolean\r\n}\r\n\r\nlet initialState: InitialRestoreStateType = {\r\n    responseLoading: false,\r\n    error: null,\r\n    success: false\r\n}\r\n\r\nexport const RestoreReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'RESTORE/SET_RESPONSE_LOADING' :\r\n            return { ...state, isLoading: action.value}\r\n        case 'RESTORE/SET_ERROR':\r\n            return {...state, error: action.error}\r\n            case 'RESTORE/SET_SUCCESS_REQUEST':\r\n            return {...state, error: action.success}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setError = (error: string | null) => ({\r\n    type: 'RESTORE/SET_ERROR', error\r\n} as const)\r\nexport const setResponseLoading = (value: boolean) => ({\r\n    type: 'RESTORE/SET_RESPONSE_LOADING', value\r\n} as const)\r\nexport const setSuccessRequest = (success: boolean) => ({\r\n    type: 'RESTORE/SET_SUCCESS_REQUEST', success\r\n} as const)\r\n\r\n//types\r\nexport type SetLoadingType = ReturnType<typeof setError>\r\nexport type SetDisableButtonType = ReturnType<typeof setResponseLoading>\r\nexport type SetSuccessRequest = ReturnType<typeof setSuccessRequest>\r\n\r\n\r\n//thunk\r\nexport const RestoreTC = (data: RestoreFormInput) => (dispatch: Dispatch) => {\r\n    dispatch(setResponseLoading(true))\r\n    dispatch(setSuccessRequest(false))\r\n    RestoreApi.restore(data)\r\n        .then(res => {\r\n            if( res.status === 200) {\r\n                dispatch(setResponseLoading(false))\r\n                dispatch(setError(null))\r\n                dispatch(setSuccessRequest(true))\r\n            }\r\n            }\r\n        )\r\n        .catch(e => {\r\n            dispatch(setResponseLoading(false))\r\n            dispatch(setError(e.response.data.error))\r\n        })\r\n    dispatch(setResponseLoading(false))\r\n}\r\n\r\nexport const ChangePasswordTC = (password: ChangePasswordFormInput) => (dispatch: Dispatch) => {\r\n    dispatch(setResponseLoading(true))\r\n    dispatch(setSuccessRequest(false))\r\n    RestoreApi.changePassword(password)\r\n        .then( res => {\r\n            if(res.status === 200) {\r\n                dispatch(setResponseLoading(false))\r\n                dispatch(setSuccessRequest(true))\r\n            }\r\n        })\r\n        .catch(e => {\r\n            dispatch(setResponseLoading(false))\r\n            dispatch(setError(e.response.data.error))\r\n        })\r\n}\r\n\r\n\r\n\r\n//api\r\n\r\nconst instance = axios.create({\r\n    withCredentials:true,\r\n    baseURL:\"http://localhost:7542/2.0/\"\r\n})\r\n\r\nexport const RestoreApi = {\r\n    restore(data: RestoreFormInput) {\r\n        const email = data.email\r\n        return instance.post('auth/forgot', {\r\n            email,\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\r\n                          password recovery link: \r\n                          <a href='http://localhost:3000/neko-card-react-ts-project#/changePassword/$token$'>link</a>\r\n                      </div> `\r\n        })\r\n    },\r\n    changePassword(data: ChangePasswordFormInput) {\r\n        const passwordToken = window.location.href.split('/')[5]\r\n        const password = data.password\r\n        return instance.post('auth/set-new-password' , {password, passwordToken})\r\n    }\r\n}\r\n","export type ActionsType={\r\n\r\n}\r\n\r\nlet initialState = {\r\n\r\n}\r\n\r\nexport const ChangePasswordReducer = (state = initialState, action: ActionsType) => {\r\n    return state\r\n}\r\n","import {combineReducers, createStore, applyMiddleware} from 'redux';\r\nimport {ProfileReducer} from \"./ProfileReducer\";\r\nimport {LoginReducer} from \"./LoginReducer\";\r\nimport {RegisterReducer} from \"./RegisterReducer\";\r\nimport {RestoreReducer} from \"./RestoreReducer\";\r\nimport {ChangePasswordReducer} from \"./ChangePasswordReducer\";\r\nimport thunkMiddleWare from \"redux-thunk\"\r\n\r\nlet reducers = combineReducers({\r\n    profile: ProfileReducer,\r\n    login: LoginReducer,\r\n    register: RegisterReducer,\r\n    restore: RestoreReducer,\r\n    changePassword: ChangePasswordReducer\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleWare))\r\n\r\nexport type StateType = ReturnType<typeof reducers>\r\n\r\nexport default store\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport s from './Button.module.scss'\r\n\r\ntype ButtonType = {\r\n    title?: string\r\n    onClick?: () => void\r\n    disable?: boolean\r\n}\r\n\r\nconst Button = (props: ButtonType) => {\r\n    return (\r\n        <div className={s.loginButtonBody}>\r\n            <span className={s.link}>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                <button onClick={props.onClick} disabled={props.disable} className={s.button}>\r\n                    {props.title}\r\n                </button>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button","import React, {ChangeEvent} from \"react\";\r\nimport s from './Input.module.scss'\r\nimport {RefType} from \"../Checkbox/Checkbox\";\r\n\r\ntype InputType = {\r\n    label?: string\r\n    type?: string\r\n    value?: string\r\n    onChange?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    error?: string | null\r\n    register?: RefType\r\n    name?: string\r\n    disable?: boolean\r\n}\r\n\r\nconst Input = (props: InputType) => {\r\n\r\n    return (\r\n        <div className={props.error ? s.error : s.inputBody}>\r\n            <input value={props.value}\r\n                   type={props.type}\r\n                   onChange={props.onChange}\r\n                   ref={props.register}\r\n                   name={props.name}\r\n                   disabled={props.disable}\r\n            />\r\n\r\n            {!props.value ? <label>{props.label}</label> : ''}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input","import React, {ChangeEvent, RefObject} from 'react';\r\nimport s from './Checkbox.module.scss'\r\n\r\nexport type RefType = string | ((instance: HTMLInputElement | null) => void) | RefObject<HTMLInputElement> | null | undefined\r\ntype CheckboxType = {\r\n    checked?: boolean\r\n    onChange?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    name?: string\r\n    register?:  RefType\r\n    disable?: boolean\r\n}\r\n\r\nconst Checkbox = (props: CheckboxType) => {\r\n    return (\r\n        <div >\r\n            <input  checked={props.checked}\r\n                    onChange={props.onChange}\r\n                    className={s.checkbox}\r\n                    type={'checkbox'}\r\n                    name={props.name}\r\n                    ref={props.register}\r\n                    disabled={props.disable}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Checkbox","import React from 'react';\r\nimport Button from \"../../../Components/Button/Button\";\r\nimport Input from \"../../../Components/Input/Input\";\r\nimport Checkbox from \"../../../Components/Checkbox/Checkbox\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StateType} from \"../../../store/redux-store\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {InitialLoginReducerState, setLogin} from \"../../../store/LoginReducer\";\r\nimport * as yup from \"yup\";\r\nimport {yupResolver} from '@hookform/resolvers/yup';\r\nimport s from './Login.module.scss'\r\n\r\ntype LoginFormType = {\r\n    className?: string\r\n}\r\ntype FormType = {\r\n    'login': string\r\n    'password': string\r\n    'rememberMe': boolean\r\n}\r\n\r\nconst schemaLogin = yup.object().shape({\r\n    login: yup.string().required().email(),\r\n    password: yup.string().required().min(7)\r\n})\r\n\r\n\r\nconst LoginForm = (props: LoginFormType) => {\r\n\r\n    const {register, handleSubmit, errors} = useForm<FormType>({\r\n        resolver: yupResolver(schemaLogin)\r\n    })\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const login = useSelector<StateType, InitialLoginReducerState>(state => state.login)\r\n    const isFetch = useSelector<StateType, boolean>(state => state.login.isFetching)\r\n\r\n\r\n    const onSubmit = (data: FormType) => {\r\n        dispatch(setLogin(data.login, data.password, data.rememberMe))\r\n    }\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Input\r\n                    label={'Login'}\r\n                    error={login.error}\r\n                    name={'login'}\r\n                    register={register}\r\n                    disable={isFetch}\r\n                />\r\n                {errors.login && <span className={s.errorField}>{errors.login.message}</span>}\r\n                {login.errorIn === \"email\" && <span className={s.errorField}>{login.error}</span>}\r\n                <Input\r\n                    type={'password'}\r\n                    label={'Password'}\r\n                    error={login.error}\r\n                    name={'password'}\r\n                    register={register}\r\n                    disable={isFetch}\r\n                />\r\n                {errors.password && <span className={s.errorField}>{errors.password.message}</span>}\r\n                {login.errorIn === \"password\" && <span className={s.errorField}>{login.error}</span>}\r\n                <Checkbox name={'rememberMe'} register={register} disable={isFetch}/>\r\n                <Button title={'login'} disable={isFetch}/>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React from 'react';\r\nimport s from './Login.module.scss'\r\nimport {NavLink} from 'react-router-dom';\r\nimport LoginForm from \"./LoginForm\";\r\n\r\ntype LoginType = {\r\n\r\n}\r\n\r\nconst Login = (props: LoginType) => {\r\n\r\n    return (\r\n        <div className={s.loginPage}>\r\n            <div className={s.loginFormContainer} >\r\n                <h1> LOGIN </h1>\r\n                <LoginForm className={s.loginFormContainer} />\r\n                <div className={s.items}>\r\n                    <NavLink className={s.text1} to='/restore'>Forgot your password?</NavLink>\r\n                    <NavLink className={s.text} to='/register'>Register</NavLink>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","import React from 'react';\r\nimport s from './Restore.module.scss'\r\nimport Input from \"../../../Components/Input/Input\";\r\nimport LoginForm from '../LoginPage/LoginForm';\r\nimport Button from \"../../../Components/Button/Button\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {InitialRestoreStateType, RestoreTC} from '../../../store/RestoreReducer';\r\nimport {StateType} from \"../../../store/redux-store\";\r\nimport * as yup from \"yup\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\n\r\ntype RestoreProps = {}\r\n\r\nexport type RestoreFormInput = {\r\n    email: string;\r\n}\r\n\r\nexport const schema = yup.object().shape({\r\n    email: yup.string().required().email(),\r\n});\r\n\r\nconst Restore = (props: RestoreProps) => {\r\n    const dispatch = useDispatch()\r\n    const restore = useSelector<StateType, InitialRestoreStateType>(state => state.restore)\r\n\r\n    const {control, handleSubmit, errors} = useForm<RestoreFormInput>({\r\n        resolver: yupResolver(schema)\r\n    });\r\n\r\n    const onSubmit = (data: RestoreFormInput) => {\r\n        dispatch(RestoreTC(data))\r\n    };\r\n\r\n    if (restore.responseLoading) {\r\n        return <h1>Loading...</h1>\r\n    }\r\n\r\n    return (\r\n        <div className={s.restorePage}>\r\n            <div>\r\n                <LoginForm className={s.loginBlock}/>\r\n            </div>\r\n            <div className={s.restoreBlock}>\r\n                <h1>Forgot you password?</h1>\r\n                {restore.success\r\n                    ? <h2>Link on email</h2>\r\n                    : <form onSubmit={handleSubmit(onSubmit)}>\r\n                        <Controller\r\n                            as={<Input onChange={() => errors.email?.message === null} error={errors.email?.message || restore.error} label={'Enter your login'}/>}\r\n                            name=\"email\"\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                        />\r\n\r\n                        {errors.email?.message || restore.error}\r\n\r\n                        <Button disable={restore.responseLoading} title={'SEND'}/>\r\n                    </form>\r\n                }\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Restore","import React from 'react';\r\nimport s from './Profile.module.scss'\r\n\r\ntype ProfileType = {\r\n\r\n}\r\n\r\nconst Profile = (props: ProfileType) => {\r\n    return (\r\n        <div className={s.profilePage}>\r\n            <div className={s.profileContainer}>\r\n                <h1>profile</h1>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react';\r\nimport s from './NotFound.module.scss'\r\n\r\n\r\nconst NotFound = (props: any) => {\r\n\r\n    return (\r\n        <div className={s.notFoundPage}>\r\n            <h1>404</h1>\r\n            <div>\r\n                <h1>not found</h1>\r\n                <div>тест</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound","import React, {useState} from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from './Menu.module.scss'\r\n\r\nconst Menu = () => {\r\n\r\n    const [isHide, setIsHide] = useState(false)\r\n\r\n    const showMenu = () => {\r\n        setIsHide(false)\r\n    }\r\n    const hideMenu = () => {\r\n        setIsHide(true)\r\n    }\r\n\r\n    return (\r\n        <div className={s.menu}>\r\n            {isHide\r\n                ? <button onClick={showMenu}>menu</button>\r\n                : <div className={s.menuActive}>\r\n                    <button onClick={hideMenu}>menu</button>\r\n                    <NavLink to='/restore' className={s.link} activeClassName={s.activeLink}>Forgot password</NavLink>\r\n                    <NavLink to='/register' className={s.link} activeClassName={s.activeLink}>Register</NavLink>\r\n                    <NavLink to='/login' className={s.link} activeClassName={s.activeLink}>Login</NavLink>\r\n                    <NavLink to='/profile' className={s.link} activeClassName={s.activeLink}>Profile</NavLink>\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Menu","import React from 'react';\r\nimport s from './Restore.module.scss'\r\nimport Input from \"../../../Components/Input/Input\";\r\nimport LoginForm from '../LoginPage/LoginForm';\r\nimport Button from \"../../../Components/Button/Button\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ChangePasswordTC, InitialRestoreStateType, setError} from \"../../../store/RestoreReducer\";\r\nimport {StateType} from \"../../../store/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport * as yup from \"yup\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\n\r\ntype ChangePasswordPropsType = {}\r\n\r\nexport type ChangePasswordFormInput = {\r\n    password: string,\r\n    repeat_password: string\r\n}\r\n\r\nexport const schema = yup.object().shape({\r\n    password: yup.string().required().min(7),\r\n});\r\n\r\n\r\nconst RestoreChangePassword = (props: ChangePasswordPropsType) => {\r\n    const restore = useSelector<StateType, InitialRestoreStateType>(state => state.restore)\r\n    const dispatch = useDispatch()\r\n\r\n    const {control, handleSubmit, errors} = useForm<ChangePasswordFormInput>({\r\n        resolver: yupResolver(schema)\r\n    });\r\n\r\n    const onSubmit = (data: ChangePasswordFormInput) => {\r\n        if (data.password === data.repeat_password){\r\n            dispatch(ChangePasswordTC(data))\r\n        }\r\n        else dispatch(setError('Password must be identical '))\r\n    };\r\n\r\n    if (restore.success) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.restorePage}>\r\n            <div>\r\n                <LoginForm className={s.loginBlock}/>\r\n            </div>\r\n\r\n            <div className={s.restoreBlock}>\r\n                <h1>Please, set your new Password</h1>\r\n\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <Controller\r\n                        as={<Input error={restore.error} label={'password'}/>}\r\n                        name=\"password\"\r\n                        control={control}\r\n                        defaultValue=\"\"\r\n                    />\r\n                    <Controller\r\n                        as={<Input error=  {errors.password?.message || restore.error} label={'repeat password'}/>}\r\n                        name=\"repeat_password\"\r\n                        control={control}\r\n                        defaultValue=\"\"\r\n                    />\r\n\r\n                    {errors.password?.message || restore.error}\r\n                    <Button disable={restore.responseLoading} title={'SEND'}/>\r\n                </form>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RestoreChangePassword","import React from \"react\";\r\nimport s from './Input.module.scss'\r\n\r\ntype RefReturn =\r\n    | string\r\n    | ((instance: HTMLInputElement | null) => void)\r\n    | React.RefObject<HTMLInputElement>\r\n    | null\r\n    | undefined;\r\n\r\ntype InputProps = React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>,\r\n    HTMLInputElement> & {\r\n    label: string;\r\n    register: ({required}: { required?: boolean }) => RefReturn;\r\n};\r\n\r\nexport const InputForm: React.FC<InputProps> = ({label, register, required, placeholder, type}, props) => {\r\n    return (\r\n        <div className={ props.error? s.error : s.inputBody}>\r\n            <input\r\n                name={label}\r\n                ref={register({required})}\r\n                placeholder={placeholder}\r\n                type={type}\r\n            />\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport * as yup from \"yup\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport s from \"./Register.module.scss\";\r\nimport {InputForm} from \"../../../Components/Input/InputHOC\";\r\nimport Button from \"../../../Components/Button/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {initialStateType, RegisterUserTC, SetErrorMessageAC} from \"../../../store/RegisterReducer\";\r\nimport {StateType} from \"../../../store/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport err from \"../../../Components/Input/Input.module.scss\"\r\n\r\n\r\nexport const schema = yup.object().shape({\r\n    password: yup.string().required().min(7),\r\n    email: yup.string().required().email(),\r\n    confirm_password: yup.string().required().min(7)\r\n});\r\n\r\nexport const RegisterWithHookForm = React.memo(() => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const newUserData = useSelector<StateType, initialStateType>(state => state.register)\r\n\r\n    type FormsType = {\r\n        \"confirm_password\": string\r\n        \"password\": string\r\n        \"email\": string\r\n    }\r\n\r\n    const {register, handleSubmit, errors, reset} = useForm<FormsType>(\r\n        {\r\n            resolver: yupResolver(schema)\r\n        }\r\n    );\r\n\r\n    const onSubmit = (data: FormsType) => {\r\n        if (data.confirm_password === data.password) {\r\n            let newData = {\r\n                email: data.email,\r\n                password: data.password\r\n            }\r\n            dispatch(RegisterUserTC(newData))\r\n            console.log(newData);\r\n            reset()\r\n        } else {\r\n            dispatch(SetErrorMessageAC('Пароли не совпадают'))\r\n        }\r\n    }\r\n\r\n    const onBlur = () => {\r\n        dispatch(SetErrorMessageAC(''))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {newUserData.data.email.length > 0 && <Redirect to={'/login'}/>}\r\n            <div className={s.registerPage} onBlur={onBlur}>\r\n                <div className={s.registerBox}>\r\n                    <h1>REGISTER</h1>\r\n                    {newUserData.errorMessage ? <div>{newUserData.errorMessage}</div> : null}\r\n                    <form onSubmit={handleSubmit(onSubmit)}>\r\n                        <div className={newUserData.errorMessage || errors.email ? err.error : ''}>\r\n                            <InputForm\r\n                                register={register}\r\n                                label='email'\r\n                                type={'text'}\r\n                                placeholder={'email'}\r\n                            />\r\n                            {errors.email?.message}\r\n                        </div>\r\n                        <div className={newUserData.errorMessage || errors.password ? err.error : ''}>\r\n                            <InputForm\r\n                                register={register}\r\n                                label='password'\r\n                                type={'password'}\r\n                                placeholder={'password'}\r\n                            />\r\n                            {errors.password?.message}\r\n                        </div>\r\n                        <div className={newUserData.errorMessage || errors.password ? err.error : ''}>\r\n                            <InputForm\r\n                                register={register}\r\n                                label='confirm_password'\r\n                                type={'password'}\r\n                                placeholder={'confirm password'}\r\n                            />\r\n                            {errors.confirm_password?.message}\r\n                        </div>\r\n                        <Button title={\"SEND\"} disable={newUserData.registerFetching}/>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {HashRouter, Route, Switch} from 'react-router-dom';\r\nimport Login from './main/authGroup/LoginPage/Login';\r\nimport Restore from \"./main/authGroup/RestorePage/Restore\";\r\nimport Profile from \"./main/ProfilePage/Profile\";\r\nimport NotFound from './main/NotFound/NotFound';\r\nimport Menu from \"./main/Menu/Menu\";\r\nimport RestoreChangePassword from \"./main/authGroup/RestorePage/RestoreChangePassword\";\r\nimport {RegisterWithHookForm} from \"./main/authGroup/RegisterPage/RegisterWithHookForm\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n                <Menu/>\r\n\r\n                <Switch>\r\n                    <Route path='/restore' render={() => (<Restore/>)}/>\r\n                    <Route exact path='/register' render={() => (<RegisterWithHookForm/>)}/>\r\n                    <Route exact path={['/login', '/']} render={() => (<Login/>)}/>\r\n                    <Route exact path='/profile' render={() => (<Profile/>)}/>\r\n                    <Route path='/changePassword' render={() => (<RestoreChangePassword/>)}/>\r\n                    <Route render={() => (<NotFound/>)}/>\r\n                </Switch>\r\n            </div>\r\n        </HashRouter>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store/redux-store\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>\n\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}